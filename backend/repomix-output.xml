This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
h_backend/
  api/
    migrations/
      __init__.py
      0001_initial.py
      0002_product_is_bestseller.py
    __init__.py
    admin.py
    apps.py
    models.py
    serializers.py
    tests.py
    urls.py
    views.py
  h_backend/
    __init__.py
    asgi.py
    settings.py
    urls.py
    wsgi.py
  media/
    categories/
      26278417_iql9_dxmn_220407.jpg
    products/
      crown-paints__0002_silk-vinly-emulsion-cream-4-litrs.jpg
      italia-uno-plus.png
      placeholder2-2.png
    slides/
      20019.jpg
  db.sqlite3
  manage.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="h_backend/api/migrations/0001_initial.py">
# Generated by Django 5.2.7 on 2025-10-18 18:10

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompanyInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('whatsapp_number', models.CharField(help_text='Format: 254700000000', max_length=20)),
                ('instagram_url', models.URLField(blank=True)),
                ('facebook_url', models.URLField(blank=True)),
                ('tiktok_url', models.URLField(blank=True)),
                ('whatsapp_default_message', models.CharField(default="Hello! I'm interested in your products.", max_length=200)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company Information',
                'verbose_name_plural': 'Company Information',
            },
        ),
        migrations.CreateModel(
            name='CompanyLogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.ImageField(upload_to='logos/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('subtitle', models.CharField(blank=True, max_length=200)),
                ('title_span', models.CharField(blank=True, max_length=200)),
                ('button_text', models.CharField(default='Shop Now', max_length=50)),
                ('link', models.CharField(default='#', max_length=200)),
                ('image', models.ImageField(upload_to='slides/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('image_1', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('image_2', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.category')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='api_product_categor_058e7c_idx'), models.Index(fields=['is_featured'], name='api_product_is_feat_fda764_idx')],
            },
        ),
    ]
</file>

<file path="h_backend/api/migrations/0002_product_is_bestseller.py">
# Generated by Django 5.2.7 on 2025-10-20 10:08

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='is_bestseller',
            field=models.BooleanField(default=False),
        ),
    ]
</file>

<file path="h_backend/api/admin.py">
from django.contrib import admin
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """
    Admin configuration for Category model
    """
    list_display = ['name', 'slug', 'created_at']
    search_fields = ['name', 'slug']
    prepopulated_fields = {'slug': ('name',)}  # Auto-generate slug from name
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'slug', 'image')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)  # This section starts collapsed
        }),
    )


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """
    Admin configuration for Product model
    """
    list_display = ['name', 'company', 'category', 'price', 'is_featured', 'is_bestseller', 'is_active', 'created_at']
    list_filter = ['category', 'is_featured', 'is_bestseller', 'is_active', 'created_at']
    search_fields = ['name', 'company', 'description']
    list_editable = ['is_featured', 'is_bestseller', 'is_active']  # Edit these directly from list view
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'company', 'category', 'price', 'description')
        }),
        ('Images', {
            'fields': ('thumbnail', 'image_1', 'image_2'),
            'description': 'Upload product images. Thumbnail is the main image shown in product cards.'
        }),
        ('Status', {
            'fields': ('is_featured', 'is_active'),
            'description': 'Featured products appear on the homepage. Inactive products are hidden.'
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    # Show 20 products per page
    list_per_page = 20


@admin.register(Slide)
class SlideAdmin(admin.ModelAdmin):
    """
    Admin configuration for Slide model (Homepage Hero Slider)
    """
    list_display = ['title', 'order', 'is_active', 'created_at']
    list_filter = ['is_active']
    search_fields = ['title', 'subtitle']
    list_editable = ['order', 'is_active']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Content', {
            'fields': ('title', 'subtitle', 'title_span', 'image')
        }),
        ('Button', {
            'fields': ('button_text', 'link'),
            'description': 'Configure the call-to-action button'
        }),
        ('Display Settings', {
            'fields': ('order', 'is_active'),
            'description': 'Lower order numbers appear first. Only active slides are shown.'
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(CompanyInfo)
class CompanyInfoAdmin(admin.ModelAdmin):
    """
    Admin configuration for CompanyInfo model (Singleton)
    """
    fieldsets = (
        ('Contact Information', {
            'fields': ('phone', 'email', 'address')
        }),
        ('Social Media', {
            'fields': ('whatsapp_number', 'whatsapp_default_message', 'instagram_url', 'facebook_url', 'tiktok_url'),
            'description': 'WhatsApp number format: 254700000000 (without +)'
        }),
        ('Timestamps', {
            'fields': ('updated_at',),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ['updated_at']
    
    def has_add_permission(self, request):
        # Only allow one instance (Singleton pattern)
        return not CompanyInfo.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # Prevent deletion of company info
        return False


@admin.register(CompanyLogo)
class CompanyLogoAdmin(admin.ModelAdmin):
    """
    Admin configuration for CompanyLogo model (Partner/Brand logos)
    """
    list_display = ['name', 'order', 'is_active', 'created_at']
    list_filter = ['is_active']
    search_fields = ['name']
    list_editable = ['order', 'is_active']
    readonly_fields = ['created_at']
    
    fieldsets = (
        ('Logo Information', {
            'fields': ('name', 'logo')
        }),
        ('Display Settings', {
            'fields': ('order', 'is_active'),
            'description': 'Lower order numbers appear first in the scrolling section.'
        }),
        ('Timestamps', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
</file>

<file path="h_backend/api/apps.py">
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'
</file>

<file path="h_backend/api/models.py">
from django.db import models
from django.utils.text import slugify


class Category(models.Model):
    """
    Represents a product category (e.g., Plumbing & Piping, Electrical)
    """
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=100, unique=True, blank=True)
    image = models.ImageField(upload_to='categories/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = "Categories"
        ordering = ['name']

    def save(self, *args, **kwargs):
        # Auto-generate slug from name if not provided
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class Product(models.Model):
    """
    Represents a product in the store
    """
    category = models.ForeignKey(
        Category, 
        on_delete=models.CASCADE, 
        related_name='products'
    )
    name = models.CharField(max_length=200)
    company = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    
    # Images
    thumbnail = models.ImageField(upload_to='products/', blank=True, null=True)
    image_1 = models.ImageField(upload_to='products/', blank=True, null=True)
    image_2 = models.ImageField(upload_to='products/', blank=True, null=True)
    
    # Product status flags
    is_featured = models.BooleanField(default=False)
    is_bestseller = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']  # Newest first
        indexes = [
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['is_featured']),
        ]

    def __str__(self):
        return f"{self.name} - {self.company}"


class Slide(models.Model):
    """
    Represents a slide in the homepage hero slider
    """
    title = models.CharField(max_length=200)
    subtitle = models.CharField(max_length=200, blank=True)
    title_span = models.CharField(max_length=200, blank=True)
    button_text = models.CharField(max_length=50, default="Shop Now")
    link = models.CharField(max_length=200, default="#")
    image = models.ImageField(upload_to='slides/')
    
    # Display order
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['order', '-created_at']

    def __str__(self):
        return self.title


class CompanyInfo(models.Model):
    """
    Store company contact information and settings (Singleton model)
    """
    # Contact details
    phone = models.CharField(max_length=20)
    email = models.EmailField()
    address = models.TextField()
    
    # Social media links
    whatsapp_number = models.CharField(max_length=20, help_text="Format: 254700000000")
    instagram_url = models.URLField(blank=True)
    facebook_url = models.URLField(blank=True)
    tiktok_url = models.URLField(blank=True)
    
    # WhatsApp default message
    whatsapp_default_message = models.CharField(
        max_length=200, 
        default="Hello! I'm interested in your products."
    )
    
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Company Information"
        verbose_name_plural = "Company Information"

    def save(self, *args, **kwargs):
        # Ensure only one instance exists (Singleton pattern)
        self.pk = 1
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        # Prevent deletion
        pass

    @classmethod
    def load(cls):
        obj, created = cls.objects.get_or_create(pk=1)
        return obj

    def __str__(self):
        return "Company Information"


class CompanyLogo(models.Model):
    """
    Represents company/partner logos for the scrolling section
    """
    name = models.CharField(max_length=100)
    logo = models.ImageField(upload_to='logos/')
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return self.name
</file>

<file path="h_backend/api/serializers.py">
from rest_framework import serializers
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo


class CategorySerializer(serializers.ModelSerializer):
    """
    Serializer for Category model
    Returns: id, name, slug, image
    """
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'image']


class ProductSerializer(serializers.ModelSerializer):
    """
    Serializer for Product model
    Includes category details and all product information
    """
    category_name = serializers.CharField(source='category.name', read_only=True)
    category_slug = serializers.CharField(source='category.slug', read_only=True)
    
    class Meta:
        model = Product
        fields = [
            'id',
            'name',
            'company',
            'price',
            'description',
            'thumbnail',
            'image_1',
            'image_2',
            'category',
            'category_name',
            'category_slug',
            'is_featured',
            'is_bestseller',
            'is_active',
            'created_at',
        ]


class ProductListSerializer(serializers.ModelSerializer):
    """
    Lighter serializer for product lists (without full details)
    Used for grid views to reduce payload size
    """
    category_name = serializers.CharField(source='category.name', read_only=True)
    
    class Meta:
        model = Product
        fields = [
            'id',
            'name',
            'company',
            'price',
            'thumbnail',
            'category_name',
            'is_featured',
            'is_bestseller',
        ]


class SlideSerializer(serializers.ModelSerializer):
    """
    Serializer for Slide model (Homepage Hero Slider)
    """
    class Meta:
        model = Slide
        fields = [
            'id',
            'title',
            'subtitle',
            'title_span',
            'button_text',
            'link',
            'image',
            'order',
        ]


class CompanyInfoSerializer(serializers.ModelSerializer):
    """
    Serializer for Company Information
    """
    class Meta:
        model = CompanyInfo
        fields = [
            'phone',
            'email',
            'address',
            'whatsapp_number',
            'whatsapp_default_message',
            'instagram_url',
            'facebook_url',
            'tiktok_url',
        ]


class CompanyLogoSerializer(serializers.ModelSerializer):
    """
    Serializer for Company Logos (scrolling section)
    """
    class Meta:
        model = CompanyLogo
        fields = ['id', 'name', 'logo', 'order']
</file>

<file path="h_backend/api/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="h_backend/api/urls.py">
from django.urls import path
from .views import (
    CategoryListView,
    ProductListView,
    ProductDetailView,
    FeaturedProductsView,
    LatestProductsView,
    BestSellerProductsView,
    SlideListView,
    CompanyInfoView,
    CompanyLogoListView,
)

urlpatterns = [
    # Categories
    path('categories/', CategoryListView.as_view(), name='category-list'),
    
    # Products
    path('products/', ProductListView.as_view(), name='product-list'),
    path('products/<int:pk>/', ProductDetailView.as_view(), name='product-detail'),
    path('products/featured/', FeaturedProductsView.as_view(), name='featured-products'),
    path('products/latest/', LatestProductsView.as_view(), name='latest-products'),
    path('products/bestsellers/', BestSellerProductsView.as_view(), name='bestseller-products'),
    
    # Homepage Content
    path('slides/', SlideListView.as_view(), name='slide-list'),
    path('company-logos/', CompanyLogoListView.as_view(), name='company-logo-list'),
    path('company-info/', CompanyInfoView.as_view(), name='company-info'),
]
</file>

<file path="h_backend/api/views.py">
from rest_framework import generics, filters
from rest_framework.response import Response
from rest_framework.views import APIView
from django_filters.rest_framework import DjangoFilterBackend
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo
from .serializers import (
    CategorySerializer,
    ProductSerializer,
    ProductListSerializer,
    SlideSerializer,
    CompanyInfoSerializer,
    CompanyLogoSerializer,
)


class CategoryListView(generics.ListAPIView):
    """
    GET /api/categories/
    Returns all active categories
    """
    queryset = Category.objects.all()
    serializer_class = CategorySerializer


class ProductListView(generics.ListAPIView):
    """
    GET /api/products/
    GET /api/products/?category=plumbing-piping
    GET /api/products/?search=cement
    
    Returns all active products with optional filtering
    """
    serializer_class = ProductListSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['category__slug', 'is_featured', 'is_bestseller']
    search_fields = ['name', 'company', 'description']
    
    def get_queryset(self):
        queryset = Product.objects.filter(is_active=True).select_related('category')
        
        # Filter by category slug if provided
        category_slug = self.request.query_params.get('category', None)
        if category_slug:
            queryset = queryset.filter(category__slug=category_slug)
        
        return queryset


class ProductDetailView(generics.RetrieveAPIView):
    """
    GET /api/products/<id>/
    Returns detailed information about a single product
    """
    queryset = Product.objects.filter(is_active=True)
    serializer_class = ProductSerializer


class FeaturedProductsView(generics.ListAPIView):
    """
    GET /api/products/featured/
    Returns only featured products for homepage
    """
    queryset = Product.objects.filter(is_active=True, is_featured=True).select_related('category')
    serializer_class = ProductListSerializer


class LatestProductsView(generics.ListAPIView):
    """
    GET /api/products/latest/
    Returns the 8 newest products for homepage
    """
    queryset = Product.objects.filter(is_active=True).select_related('category')[:8]
    serializer_class = ProductListSerializer


class BestSellerProductsView(generics.ListAPIView):
    """
    GET /api/products/bestsellers/
    Returns best selling products for homepage
    """
    queryset = Product.objects.filter(is_active=True, is_bestseller=True).select_related('category')
    serializer_class = ProductListSerializer


class SlideListView(generics.ListAPIView):
    """
    GET /api/slides/
    Returns all active slides for the homepage hero slider
    """
    queryset = Slide.objects.filter(is_active=True)
    serializer_class = SlideSerializer


class CompanyInfoView(APIView):
    """
    GET /api/company-info/
    Returns company contact information and social media links
    """
    def get(self, request):
        company_info = CompanyInfo.load()  # Uses the singleton pattern
        serializer = CompanyInfoSerializer(company_info)
        return Response(serializer.data)


class CompanyLogoListView(generics.ListAPIView):
    """
    GET /api/company-logos/
    Returns all active company/partner logos for scrolling section
    """
    queryset = CompanyLogo.objects.filter(is_active=True)
    serializer_class = CompanyLogoSerializer
</file>

<file path="h_backend/h_backend/asgi.py">
"""
ASGI config for h_backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')

application = get_asgi_application()
</file>

<file path="h_backend/h_backend/settings.py">
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.x.

For more information on this file, see
https://docs.djangoproject.com/en/5.x/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.x/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.x/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 3rd Party Apps
    'rest_framework',
    'corsheaders',
    'django_filters',

    # Local Apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # CORS Middleware - Must be before CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'h_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'h_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.x/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.x/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.x/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.x/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploaded content)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.x/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ============================================
# CORS Configuration
# ============================================
# Allow requests from your React frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React dev server (Vite)
    "http://127.0.0.1:5173",  # Alternative localhost
]

# Optional: Allow credentials (cookies, authorization headers)
CORS_ALLOW_CREDENTIALS = True


# ============================================
# Django REST Framework Configuration
# ============================================
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Public API for now
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 16,  # Matches your frontend's 4x4 grid
}
</file>

<file path="h_backend/h_backend/urls.py">
"""
URL configuration for h_backend project.
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    # API routes
    path('api/', include('api.urls')),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
</file>

<file path="h_backend/h_backend/wsgi.py">
"""
WSGI config for h_backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')

application = get_wsgi_application()
</file>

<file path="h_backend/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

</files>
