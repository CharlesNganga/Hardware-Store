# Generated by Django 5.x.x on YYYY-MM-DD HH:MM
import os # Import os
from django.db import migrations
from django.contrib.auth import get_user_model # Import user model helper

# --- Function to create the superuser ---
def create_superuser(apps, schema_editor):
    User = get_user_model() # Get the active user model

    # Get username, email, and password from environment variables
    # IMPORTANT: Set these variables in Render's Environment Variables section!
    DJANGO_SUPERUSER_USERNAME = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin')
    DJANGO_SUPERUSER_EMAIL = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com')
    DJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD') # Required

    if not DJANGO_SUPERUSER_PASSWORD:
        raise ValueError("DJANGO_SUPERUSER_PASSWORD environment variable not set. Cannot create superuser.")

    # Check if user already exists
    if not User.objects.filter(username=DJANGO_SUPERUSER_USERNAME).exists():
        print(f"\nCreating superuser: {DJANGO_SUPERUSER_USERNAME}")
        User.objects.create_superuser(
            username=DJANGO_SUPERUSER_USERNAME,
            email=DJANGO_SUPERUSER_EMAIL,
            password=DJANGO_SUPERUSER_PASSWORD
        )
    else:
        print(f"\nSuperuser {DJANGO_SUPERUSER_USERNAME} already exists.")

# --- Function to remove the superuser (optional, for reversing migration) ---
def remove_superuser(apps, schema_editor):
    User = get_user_model()
    DJANGO_SUPERUSER_USERNAME = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin')
    try:
        user = User.objects.get(username=DJANGO_SUPERUSER_USERNAME)
        if user.is_superuser:
            print(f"\nDeleting superuser: {DJANGO_SUPERUSER_USERNAME}")
            user.delete()
        else:
             print(f"\nUser {DJANGO_SUPERUSER_USERNAME} exists but is not a superuser. Skipping deletion.")
    except User.DoesNotExist:
        print(f"\nSuperuser {DJANGO_SUPERUSER_USERNAME} not found. Skipping deletion.")

# --- Migration Class ---
class Migration(settings.Migration):

    dependencies = [
        # Make this depend on the previous migration in the *same app*
        ('api', '0001_initial'),
        # Important: Also depend on the *last* migration of Django's 'auth' app
        # Check your venv's django/contrib/auth/migrations for the latest number
        migrations.swappable_dependency(migrations.AUTH_USER_MODEL), # Add this if using custom user model
        ('auth', '0012_alter_user_first_name_max_length'), # Or the latest auth migration number
    ]

    operations = [
        migrations.RunPython(create_superuser, reverse_code=remove_superuser), # Run the function
    ]