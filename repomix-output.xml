This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
backend/
  h_backend/
    api/
      migrations/
        __init__.py
        0001_initial.py
      __init__.py
      admin.py
      apps.py
      models.py
      serializers.py
      tests.py
      urls.py
      views.py
    h_backend/
      __init__.py
      asgi.py
      settings.py
      urls.py
      wsgi.py
    media/
      categories/
        1371789_731_1.jpg
        138.jpg
        19034763_e5lg_g9lm_191120.jpg
        2147773404.jpg
        2149552380.jpg
        25060.jpg
        26278417_iql9_dxmn_220407.jpg
        26569064_sl_121019_25870_67.jpg
        3285.jpg
        5374.jpg
      logos/
        Bamburi.png
        Crown.png
        Davis__Shirtliff_official_logo.png
        Devki_logo.png
        Dosho.png
        Kenpoly.png
        MRM.png
        RhinoMabati.jpeg
        SimbaCement.jpeg
      products/
        14-2.png
        24.png
        37.png
        9.png
        Braided-Hose-Pipe-Clear.jpg
        Braided-Hose-Pipe-Green.jpg
        crown-paints__0002_silk-vinly-emulsion-cream-4-litrs.jpg
        IMG-20250223-WA0019.jpg
        italia-uno-plus.png
        placeholder2-2.png
        Screenshot-2025-08-01-at-14.04.42.png
        TRONIC-2X-13A-SLIM-TWIN-SWITCH-SOCKET-600x700.webp
        Tronic-Slim-1-Gang-2-Way-Switch-600x700.webp
        TRONIC-WATER-HEATER-10L-600x720.webp
      slides/
        20019.jpg
        2149122035.jpg
        3285_2.jpg
    cookies.txt
    manage.py
    Procfile
    requirements.txt
  .gitignore
h-store/
  src/
    api/
      api.js
      services.js
    assets/
      Logo.png
    components/
      cart/
        CartContext.jsx
        CartModal.jsx
      common/
        CompanyLogos.jsx
        FeaturedProducts.jsx
        FlexSlider.jsx
        FloatingActions.jsx
        InfoSection.jsx
        LatestsProducts.jsx
        ProductCard.jsx
        ProductModal.jsx
        ProductsGrid.jsx
        ProductsHero.jsx
        SubcategoriesSection.jsx
        ThreeColumnSection.jsx
      navigation/
        Footer.jsx
        Navbar.jsx
        Topbar.jsx
    pages/
      Home.jsx
      Products.jsx
    App.css
    App.jsx
    index.css
    main.jsx
  .gitignore
  eslint.config.js
  index.html
  package.json
  README.md
  repomix-output.xml
  text.html
  vite.config.js
.gitignore
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/h_backend/cookies.txt">
# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
</file>

<file path="h-store/src/components/cart/CartContext.jsx">
import React, { createContext, useEffect, useState } from 'react';
import { addToCart, getCart, removeFromCart, updateCartItem } from '../../api/services';

// Create the Cart Context
export const CartContext = createContext();

// Cart Provider Component - this is the only export from this file
const CartProvider = ({ children }) => {
  const [cart, setCart] = useState(null);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch cart data when the app loads
  useEffect(() => {
    fetchCart();
  }, []);

  // Fetch cart from API
  const fetchCart = async () => {
    try {
      setLoading(true);
      setError(null);
      const cartData = await getCart();
      setCart(cartData);
    } catch (err) {
      console.error('Error fetching cart:', err);
      setError('Failed to load cart');
      // Initialize empty cart structure if fetch fails
      setCart({
        items: [],
        item_count: 0,
        total_price: 0
      });
    } finally {
      setLoading(false);
    }
  };

  // Add item to cart
  const addItemToCart = async (productId, quantity = 1) => {
    try {
      setLoading(true);
      setError(null);
      const updatedCart = await addToCart(productId, quantity);
      setCart(updatedCart);
      return updatedCart;
    } catch (err) {
      console.error('Error adding to cart:', err);
      setError('Failed to add item to cart');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Update cart item quantity
  const updateItemQuantity = async (itemId, quantity) => {
    try {
      setLoading(true);
      setError(null);
      const updatedCart = await updateCartItem(itemId, quantity);
      setCart(updatedCart);
      return updatedCart;
    } catch (err) {
      console.error('Error updating cart item:', err);
      setError('Failed to update item quantity');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Remove item from cart
  const removeItemFromCart = async (itemId) => {
    try {
      setLoading(true);
      setError(null);
      const updatedCart = await removeFromCart(itemId);
      setCart(updatedCart);
      return updatedCart;
    } catch (err) {
      console.error('Error removing from cart:', err);
      setError('Failed to remove item from cart');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Toggle cart modal open/close
  const toggleCart = () => {
    setIsCartOpen(!isCartOpen);
  };

  // Close cart modal
  const closeCart = () => {
    setIsCartOpen(false);
  };

  // Open cart modal
  const openCart = () => {
    setIsCartOpen(true);
  };

  // Clear cart (for future use)
  const clearCart = () => {
    setCart({
      items: [],
      item_count: 0,
      total_price: 0
    });
  };

  // Derived values from cart
  const itemCount = cart?.item_count || 0;
  const totalPrice = cart?.total_price || 0;
  const cartItems = cart?.items || [];

  // Context value
  const value = {
    // State
    cart,
    isCartOpen,
    loading,
    error,
    
    // Derived values
    itemCount,
    totalPrice,
    cartItems,
    
    // Actions
    fetchCart,
    addItemToCart,
    updateItemQuantity,
    removeItemFromCart,
    toggleCart,
    openCart,
    closeCart,
    clearCart,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

export default CartProvider;
</file>

<file path="h-store/src/components/cart/CartModal.jsx">
import { Minus, Plus, Trash2, X } from 'lucide-react';

// src/components/cart/CartModal.jsx
import React from 'react';
import { backendUrl } from '../../api/api';
import { useCart } from '../cart/CartContext'; // Corrected path

// This component will render individual items in the cart
const CartItem = ({ item }) => {
  const { updateCartQuantity, removeFromCart, loading } = useCart();

  // Helper function to get the correct image URL
  const getImageUrl = (thumbnail) => {
    if (!thumbnail) {
      return 'https://via.placeholder.com/100'; // Fallback
    }
    if (thumbnail.startsWith('http')) {
      return thumbnail; // Already a full URL
    }
    // Prepend backendUrl if it's a relative path
    return `${backendUrl}${thumbnail}`;
  };

  return (
    <li className="flex py-6">
      <div className="h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200">
        <img
          src={getImageUrl(item.product.thumbnail)}
          alt={item.product.name}
          className="h-full w-full object-cover object-center"
        />
      </div>

      <div className="ml-4 flex flex-1 flex-col">
        <div>
          <div className="flex justify-between text-base font-medium text-gray-900">
            <h3>{item.product.name}</h3>
            <p className="ml-4">Ksh {item.total_item_price}</p>
          </div>
          <p className="mt-1 text-sm text-gray-500">
            Ksh {item.product.price} each
          </p>
        </div>
        <div className="flex flex-1 items-end justify-between text-sm">
          {/* Quantity Controls - These match your ProductModal style */}
          <div className="flex items-center border border-gray-300 rounded">
            <button
              onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
              disabled={loading}
              className="px-2 py-1 text-gray-600 hover:bg-gray-100 disabled:opacity-50"
            >
              <Minus size={16} />
            </button>
            <span className="px-3 py-1 font-medium">{item.quantity}</span>
            <button
              onClick={() => updateCartQuantity(item.id, item.quantity + 1)}
              disabled={loading}
              className="px-2 py-1 text-gray-600 hover:bg-gray-100 disabled:opacity-50"
            >
              <Plus size={16} />
            </button>
          </div>

          {/* Remove Button - Red is standard for delete actions */}
          <div className="flex">
            <button
              type="button"
              onClick={() => removeFromCart(item.id)}
              disabled={loading}
              className="font-medium text-red-600 hover:text-red-500 flex items-center gap-1 disabled:opacity-50"
            >
              <Trash2 size={16} />
              <span>Remove</span>
            </button>
          </div>
        </div>
      </div>
    </li>
  );
};

// This is the main Cart Modal component
const CartModal = () => {
  const { isCartOpen, toggleCart, cart, itemCount, totalPrice, loading } = useCart();

  return (
    <div
      className={`fixed inset-0 z-50 overflow-hidden ${
        isCartOpen ? 'pointer-events-auto' : 'pointer-events-none'
      }`}
    >
      {/* Backdrop Overlay */}
      <div
        className={`absolute inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${
          isCartOpen ? 'opacity-100' : 'opacity-0'
        }`}
        onClick={toggleCart} // Close modal on overlay click
      />

      {/* Cart Panel */}
      <div
        className={`fixed inset-y-0 right-0 flex max-w-full pl-10 transition-transform duration-300 ease-in-out ${
          isCartOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="relative w-screen max-w-md">
          <div className="flex h-full flex-col overflow-y-scroll bg-white shadow-xl">
            {/* Header */}
            <div className="flex items-start justify-between px-4 py-6 sm:px-6 border-b">
              <h2 className="text-lg font-medium text-gray-900">
                Shopping Cart
              </h2>
              <button
                type="button"
                className="-m-2 p-2 text-gray-400 hover:text-gray-500"
                onClick={toggleCart}
              >
                <span className="sr-only">Close panel</span>
                <X className="h-6 w-6" aria-hidden="true" />
              </button>
            </div>

            {/* Cart Items List */}
            <div className="flex-1 overflow-y-auto px-4 py-6 sm:px-6">
              {loading && !cart ? (
                <p>Loading cart...</p>
              ) : !cart || !cart.items || cart.items.length === 0 ? (
                <div className="text-center text-gray-500 mt-10">
                  <p>Your cart is empty.</p>
                </div>
              ) : (
                <ul role="list" className="-my-6 divide-y divide-gray-200">
                  {cart.items.map((item) => (
                    <CartItem key={item.id} item={item} />
                  ))}
                </ul>
              )}
            </div>

            {/* Footer / Subtotal */}
            {cart && cart.items && cart.items.length > 0 && (
              <div className="border-t border-gray-200 px-4 py-6 sm:px-6">
                <div className="flex justify-between text-base font-medium text-gray-900">
                  <p>Subtotal ({itemCount} {itemCount === 1 ? 'item' : 'items'})</p>
                  <p>Ksh {totalPrice}</p>
                </div>
                <p className="mt-0.5 text-sm text-gray-500">
                  Shipping and taxes calculated at checkout.
                </p>
                <div className="mt-6">
                  {/* --- UI Change Here --- */}
                  <button
                    disabled
                    // Use green-600 to match your "Proceed to Checkout" button
                    className="w-full flex items-center justify-center rounded-md border border-transparent bg-green-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-green-700 disabled:opacity-50"
                  >
                    Checkout (Coming Soon)
                  </button>
                </div>
                <div className="mt-6 flex justify-center text-center text-sm text-gray-500">
                  <p>
                    or{' '}
                    {/* --- UI Change Here --- */}
                    <button
                      type="button"
                      // Use your primary brand color
                      className="font-medium text-[#1228e1] hover:text-blue-700"
                      onClick={toggleCart}
                    >
                      Continue Shopping
                      <span aria-hidden="true"> &rarr;</span>
                    </button>
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CartModal;
</file>

<file path="backend/h_backend/api/migrations/0001_initial.py">
# Generated by Django 5.2.7 on 2025-10-24 15:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(db_index=True, max_length=40, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompanyInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('whatsapp_number', models.CharField(help_text='Format: 254700000000', max_length=20)),
                ('instagram_url', models.URLField(blank=True)),
                ('facebook_url', models.URLField(blank=True)),
                ('tiktok_url', models.URLField(blank=True)),
                ('whatsapp_default_message', models.CharField(default="Hello! I'm interested in your products.", max_length=200)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company Information',
                'verbose_name_plural': 'Company Information',
            },
        ),
        migrations.CreateModel(
            name='CompanyLogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.ImageField(upload_to='logos/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('subtitle', models.CharField(blank=True, max_length=200)),
                ('title_span', models.CharField(blank=True, max_length=200)),
                ('button_text', models.CharField(default='Shop Now', max_length=50)),
                ('link', models.CharField(default='#', max_length=200)),
                ('image', models.ImageField(upload_to='slides/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('image_1', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('image_2', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.category')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='api.product')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'is_active'], name='api_product_categor_058e7c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured'], name='api_product_is_feat_fda764_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'product')},
        ),
    ]
</file>

<file path="backend/h_backend/api/admin.py">
from django.contrib import admin
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo, Cart, CartItem


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """
    Admin configuration for Category model
    """
    list_display = ['name', 'slug', 'created_at']
    search_fields = ['name', 'slug']
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'slug', 'image')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """
    Admin configuration for Product model
    """
    list_display = ['name', 'company', 'category', 'price', 'is_featured', 'is_bestseller', 'is_active', 'created_at']
    list_filter = ['category', 'is_featured', 'is_bestseller', 'is_active', 'created_at']
    search_fields = ['name', 'company', 'description']
    list_editable = ['is_featured', 'is_bestseller', 'is_active']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'company', 'category', 'price', 'description')
        }),
        ('Images', {
            'fields': ('thumbnail', 'image_1', 'image_2'),
            'description': 'Upload product images. Thumbnail is the main image shown in product cards.'
        }),
        ('Status', {
            'fields': ('is_featured', 'is_active'),
            'description': 'Featured products appear on the homepage. Inactive products are hidden.'
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    list_per_page = 20


@admin.register(Slide)
class SlideAdmin(admin.ModelAdmin):
    """
    Admin configuration for Slide model (Homepage Hero Slider)
    """
    list_display = ['title', 'order', 'is_active', 'created_at']
    list_filter = ['is_active']
    search_fields = ['title', 'subtitle']
    list_editable = ['order', 'is_active']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('Content', {
            'fields': ('title', 'subtitle', 'title_span', 'image')
        }),
        ('Button', {
            'fields': ('button_text', 'link'),
            'description': 'Configure the call-to-action button'
        }),
        ('Display Settings', {
            'fields': ('order', 'is_active'),
            'description': 'Lower order numbers appear first. Only active slides are shown.'
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(CompanyInfo)
class CompanyInfoAdmin(admin.ModelAdmin):
    """
    Admin configuration for CompanyInfo model (Singleton)
    """
    fieldsets = (
        ('Contact Information', {
            'fields': ('phone', 'email', 'address')
        }),
        ('Social Media', {
            'fields': ('whatsapp_number', 'whatsapp_default_message', 'instagram_url', 'facebook_url', 'tiktok_url'),
            'description': 'WhatsApp number format: 254700000000 (without +)'
        }),
        ('Timestamps', {
            'fields': ('updated_at',),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ['updated_at']
    
    def has_add_permission(self, request):
        return not CompanyInfo.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        return False


@admin.register(CompanyLogo)
class CompanyLogoAdmin(admin.ModelAdmin):
    """
    Admin configuration for CompanyLogo model (Partner/Brand logos)
    """
    list_display = ['name', 'order', 'is_active', 'created_at']
    list_filter = ['is_active']
    search_fields = ['name']
    list_editable = ['order', 'is_active']
    readonly_fields = ['created_at']
    
    fieldsets = (
        ('Logo Information', {
            'fields': ('name', 'logo')
        }),
        ('Display Settings', {
            'fields': ('order', 'is_active'),
            'description': 'Lower order numbers appear first in the scrolling section.'
        }),
        ('Timestamps', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )


# ============================================
# NEW CART ADMIN
# ============================================

class CartItemInline(admin.TabularInline):
    """
    Inline admin for CartItem - shows items within Cart admin
    """
    model = CartItem
    extra = 0
    readonly_fields = ['product', 'quantity', 'total_price', 'created_at']
    can_delete = True
    
    def total_price(self, obj):
        """Display calculated total price"""
        return f"Ksh {obj.total_price}"
    total_price.short_description = 'Total Price'


@admin.register(Cart)
class CartAdmin(admin.ModelAdmin):
    """
    Admin configuration for Cart model
    """
    list_display = ['id', 'session_key_short', 'item_count', 'total_price_display', 'created_at', 'updated_at']
    search_fields = ['session_key']
    readonly_fields = ['session_key', 'created_at', 'updated_at', 'item_count', 'total_price_display']
    list_filter = ['created_at', 'updated_at']
    inlines = [CartItemInline]
    
    fieldsets = (
        ('Cart Information', {
            'fields': ('session_key', 'item_count', 'total_price_display')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
        }),
    )
    
    def session_key_short(self, obj):
        """Display shortened session key"""
        return f"{obj.session_key[:8]}..."
    session_key_short.short_description = 'Session'
    
    def total_price_display(self, obj):
        """Display formatted total price"""
        return f"Ksh {obj.total_price}"
    total_price_display.short_description = 'Total Price'
    
    def has_add_permission(self, request):
        """Carts should only be created through the API"""
        return False


@admin.register(CartItem)
class CartItemAdmin(admin.ModelAdmin):
    """
    Admin configuration for CartItem model
    """
    list_display = ['id', 'cart_session', 'product', 'quantity', 'total_price_display', 'created_at']
    list_filter = ['created_at', 'updated_at']
    search_fields = ['cart__session_key', 'product__name']
    readonly_fields = ['cart', 'product', 'quantity', 'total_price_display', 'created_at', 'updated_at']
    
    fieldsets = (
        ('Cart Item Information', {
            'fields': ('cart', 'product', 'quantity', 'total_price_display')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
        }),
    )
    
    def cart_session(self, obj):
        """Display cart session key (shortened)"""
        return f"{obj.cart.session_key[:8]}..."
    cart_session.short_description = 'Cart Session'
    
    def total_price_display(self, obj):
        """Display formatted total price"""
        return f"Ksh {obj.total_price}"
    total_price_display.short_description = 'Total Price'
    
    def has_add_permission(self, request):
        """Cart items should only be created through the API"""
        return False
</file>

<file path="backend/h_backend/api/apps.py">
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'
</file>

<file path="backend/h_backend/api/models.py">
from django.db import models
from django.utils.text import slugify


class Category(models.Model):
    """
    Represents a product category (e.g., Plumbing & Piping, Electrical)
    """
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=100, unique=True, blank=True)
    image = models.ImageField(upload_to='categories/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = "Categories"
        ordering = ['name']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class Product(models.Model):
    """
    Represents a product in the store
    """
    category = models.ForeignKey(
        Category, 
        on_delete=models.CASCADE, 
        related_name='products'
    )
    name = models.CharField(max_length=200)
    company = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    
    # Images
    thumbnail = models.ImageField(upload_to='products/', blank=True, null=True)
    image_1 = models.ImageField(upload_to='products/', blank=True, null=True)
    image_2 = models.ImageField(upload_to='products/', blank=True, null=True)
    
    # Product status flags
    is_featured = models.BooleanField(default=False)
    is_bestseller = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['is_featured']),
        ]

    def __str__(self):
        return f"{self.name} - {self.company}"


class Slide(models.Model):
    """
    Represents a slide in the homepage hero slider
    """
    title = models.CharField(max_length=200)
    subtitle = models.CharField(max_length=200, blank=True)
    title_span = models.CharField(max_length=200, blank=True)
    button_text = models.CharField(max_length=50, default="Shop Now")
    link = models.CharField(max_length=200, default="#")
    image = models.ImageField(upload_to='slides/')
    
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['order', '-created_at']

    def __str__(self):
        return self.title


class CompanyInfo(models.Model):
    """
    Store company contact information and settings (Singleton model)
    """
    phone = models.CharField(max_length=20)
    email = models.EmailField()
    address = models.TextField()
    
    whatsapp_number = models.CharField(max_length=20, help_text="Format: 254700000000")
    instagram_url = models.URLField(blank=True)
    facebook_url = models.URLField(blank=True)
    tiktok_url = models.URLField(blank=True)
    
    whatsapp_default_message = models.CharField(
        max_length=200, 
        default="Hello! I'm interested in your products."
    )
    
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Company Information"
        verbose_name_plural = "Company Information"

    def save(self, *args, **kwargs):
        self.pk = 1
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        pass

    @classmethod
    def load(cls):
        obj, created = cls.objects.get_or_create(pk=1)
        return obj

    def __str__(self):
        return "Company Information"


class CompanyLogo(models.Model):
    """
    Represents company/partner logos for the scrolling section
    """
    name = models.CharField(max_length=100)
    logo = models.ImageField(upload_to='logos/')
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return self.name


# ============================================
# NEW CART MODELS FOR ANONYMOUS USERS
# ============================================

class Cart(models.Model):
    """
    Represents a shopping cart linked to an anonymous session.
    No user authentication required - identified by session_key only.
    """
    session_key = models.CharField(max_length=40, unique=True, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-updated_at']

    def __str__(self):
        return f"Cart (Session: {self.session_key[:8]}...)"

    @property
    def total_price(self):
        """Calculate total price of all items in cart"""
        return sum(item.total_price for item in self.items.all())

    @property
    def item_count(self):
        """Calculate total number of items in cart"""
        return sum(item.quantity for item in self.items.all())


class CartItem(models.Model):
    """
    Represents a single product in a cart with quantity.
    Links Cart to Product.
    """
    cart = models.ForeignKey(
        Cart,
        on_delete=models.CASCADE,
        related_name='items'
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='cart_items'
    )
    quantity = models.PositiveIntegerField(default=1)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']
        # Ensure each product appears only once per cart
        unique_together = ['cart', 'product']

    def __str__(self):
        return f"{self.quantity}x {self.product.name} in cart {self.cart.session_key[:8]}..."

    @property
    def total_price(self):
        """Calculate total price for this cart item"""
        return self.product.price * self.quantity
</file>

<file path="backend/h_backend/api/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="backend/h_backend/api/urls.py">
from django.urls import path
from .views import (
    CategoryListView,
    ProductListView,
    ProductDetailView,
    FeaturedProductsView,
    LatestProductsView,
    BestSellerProductsView,
    SlideListView,
    CompanyInfoView,
    CompanyLogoListView,
    CartView,  # NEW
)

urlpatterns = [
    # Categories
    path('categories/', CategoryListView.as_view(), name='category-list'),
    
    # Products
    path('products/', ProductListView.as_view(), name='product-list'),
    path('products/<int:pk>/', ProductDetailView.as_view(), name='product-detail'),
    path('products/featured/', FeaturedProductsView.as_view(), name='featured-products'),
    path('products/latest/', LatestProductsView.as_view(), name='latest-products'),
    path('products/bestsellers/', BestSellerProductsView.as_view(), name='bestseller-products'),
    
    # Homepage Content
    path('slides/', SlideListView.as_view(), name='slide-list'),
    path('company-logos/', CompanyLogoListView.as_view(), name='company-logo-list'),
    path('company-info/', CompanyInfoView.as_view(), name='company-info'),
    
    # Cart (NEW - Anonymous Session-Based Cart)
    path('cart/', CartView.as_view(), name='cart-view'),
]
</file>

<file path="backend/h_backend/h_backend/asgi.py">
"""
ASGI config for h_backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')

application = get_asgi_application()
</file>

<file path="backend/h_backend/h_backend/urls.py">
"""
URL configuration for h_backend project.
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    # API routes
    path('api/', include('api.urls')),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
</file>

<file path="backend/h_backend/h_backend/wsgi.py">
"""
WSGI config for h_backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')

application = get_wsgi_application()
</file>

<file path="backend/h_backend/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'h_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="backend/h_backend/Procfile">
web: gunicorn h_backend.wsgi
</file>

<file path="backend/.gitignore">
# ============================
# PYTHON BASICS
# ============================
__pycache__/
*.py[cod]
*$py.class

# Virtual environment
venv/
.env/
.env.bak/
venv.bak/

# Distribution / packaging
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# ============================
# DJANGO SPECIFIC
# ============================
# SQLite database
db.sqlite3
db.sqlite3-journal

# Django migrations (optional to ignore compiled migration cache)
*/migrations/__pycache__/

# Local Django settings override
local_settings.py

# ============================
# MEDIA & STATIC FILES
# ============================
# User-uploaded media files
/media/
# Collected static files
/staticfiles/
# If you have frontend build output (optional)
frontend_build/
frontend_dist/

# ============================
# LOGS & RUNTIME FILES
# ============================
*.log
logs/
celerybeat-schedule
celerybeat.pid

# ============================
# IDE / EDITOR FILES
# ============================
# VSCode
.vscode/
# PyCharm
.idea/
# Sublime Text
*.sublime-project
*.sublime-workspace

# ============================
# OS / SYSTEM FILES
# ============================
.DS_Store
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# ============================
# REPOMIX / EXPORT FILES
# ============================
# AI or codebase analysis outputs
repomix_merged_*.txt
*.repomix
</file>

<file path="h-store/src/api/api.js">
// src/api.js
import axios from "axios";

// 1. Keep this export from your previous version.
// You NEED this for image paths.
export const backendUrl = "http://localhost:8000";

// 2. Define the API base URL
const BASE_URL = `${backendUrl}/api/`;

// 3. Create your new, robust axios instance
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000, // 10 seconds
  headers: {
    "Content-Type": "application/json",
  },
});

// 4. Keep your new interceptors (they are perfect)
api.interceptors.request.use(
  (config) => {
    // You can add auth tokens here later
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      console.error("API Error:", error.response.data);
    } else if (error.request) {
      console.error("Network Error:", error.request);
    } else {
      console.error("Error:", error.message);
    }
    return Promise.reject(error);
  }
);

// 5. Export the api instance
export default api;
</file>

<file path="h-store/src/api/services.js">
import api from './api';

// ========================================
// Categories
// ========================================
export const getCategories = async () => {
  const response = await api.get('/categories/');
  return response.data;
};

// ========================================
// Products
// ========================================
export const getAllProducts = async (params = {}) => {
  const response = await api.get('/products/', { params });
  return response.data;
};

export const getProductsByCategory = async (categorySlug) => {
  const response = await api.get('/products/', {
    params: { category: categorySlug }
  });
  return response.data;
};

export const getProductDetail = async (productId) => {
  const response = await api.get(`/products/${productId}/`);
  return response.data;
};

export const getFeaturedProducts = async () => {
  const response = await api.get('/products/featured/');
  return response.data;
};

export const getLatestProducts = async () => {
  const response = await api.get('/products/latest/');
  return response.data;
};

export const getBestSellerProducts = async () => {
  const response = await api.get('/products/bestsellers/');
  return response.data;
};

export const searchProducts = async (searchTerm) => {
  const response = await api.get('/products/', {
    params: { search: searchTerm }
  });
  return response.data;
};

// ========================================
// Homepage Content
// ========================================
export const getSlides = async () => {
  const response = await api.get('/slides/');
  return response.data;
};

export const getCompanyInfo = async () => {
  const response = await api.get('/company-info/');
  return response.data;
};

export const getCompanyLogos = async () => {
  const response = await api.get('/company-logos/');
  return response.data;
};
</file>

<file path="h-store/src/components/common/ProductsHero.jsx">
import { Link } from "react-router-dom";
import React from "react";

const ProductsHero = ({ selectedSubcategory }) => {
  // Format subcategory for display
  const displayCategory = selectedSubcategory
    ? selectedSubcategory.replace(/-/g, " ")
    : null;

  return (
    <div
      className="w-full h-[25vh] relative flex items-center justify-center bg-black bg-opacity-10"
      style={{
        backgroundImage:
          "url('https://images.unsplash.com/photo-1584622781564-1d987709cea4?w=1600&h=400&fit=crop')",
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="absolute inset-0 bg-black bg-opacity-30"></div>

      <div className="relative text-center text-white">
        <h1 className="text-2xl md:text-3xl font-bold flex items-center justify-center gap-2">
          <Link
            to="/products"
            className="hover:text-[#1228e1] transition-colors duration-200"
          >
            Home
          </Link>
          {displayCategory && (
            <>
              <span className="mx-2">|</span>
              <span className="capitalize">{displayCategory}</span>
            </>
          )}
        </h1>
      </div>
    </div>
  );
};

export default ProductsHero;
</file>

<file path="h-store/src/components/common/ThreeColumnSection.jsx">
import React from "react";

const ThreeColumnSection = () => {
  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-16">
      {/* Grid: 12 columns */}
      <div className="grid grid-cols-1 md:grid-cols-12 gap-6 items-start">
        
        {/* Images section (≈62%) */}
        <div className="md:col-span-7 grid grid-cols-2 gap-6">
          {/* Image 1 */}
          <div className="w-full aspect-[3/4] bg-black"></div>

          {/* Image 2 shifted lower */}
          <div className="w-full aspect-[3/4] bg-black relative top-12"></div>
        </div>

        {/* Text Block aligned with Image 2 (≈38%) */}
        <div className="md:col-span-5 flex flex-col justify-center space-y-4 px-4 relative top-28">
          {/* Subheading */}
          <p className="text-sm font-semibold text-[#1228e1] uppercase tracking-wide">
            Premium Quality
          </p>

          {/* Main Heading */}
          <h2 className="text-2xl md:text-3xl font-bold uppercase text-gray-900">
            Modern Bathroom Solutions
          </h2>

          {/* Description */}
          <p className="text-gray-600 text-sm md:text-base">
            Discover stylish and durable bathroom fittings designed to bring
            elegance and functionality to your home.
          </p>

          {/* Button */}
          <a
            href="/products"
            className="inline-flex items-center justify-center bg-[#1228e1] text-white px-4 py-2 text-sm font-semibold uppercase tracking-wide hover:bg-blue-900 transition"
          >
            Explore Now
          </a>
        </div>
      </div>
    </div>
  );
};

export default ThreeColumnSection;
</file>

<file path="h-store/src/pages/Home.jsx">
import CompanyLogos from "../components/common/CompanyLogos";
import FeaturedProducts from "../components/common/FeaturedProducts";
import FlexSlider from "../components/common/FlexSlider";
import FloatingActions from "../components/common/FloatingActions";
import Footer from "../components/navigation/Footer";
import InfoSection from "../components/common/InfoSection";
import LatestProducts from "../components/common/LatestsProducts";
import Navbar from "../components/navigation/Navbar";
// src/pages/Home.jsx
import React from "react";
import ThreeColumnSection from "../components/common/ThreeColumnSection";
import TopBar from "../components/navigation/Topbar";

const Home = () => {
  return (
    <div>
      <TopBar />
      <Navbar />
      <FlexSlider />
      <FloatingActions />
      <FeaturedProducts />
      <LatestProducts />
      <InfoSection />
      <ThreeColumnSection />
      <CompanyLogos />
      <Footer />
    </div>
  );
};

export default Home;
</file>

<file path="h-store/src/App.css">
@import "tailwindcss";
</file>

<file path="h-store/src/index.css">
@import "tailwindcss";
</file>

<file path="h-store/src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="h-store/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="h-store/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="h-store/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- <link rel="icon" type="image/svg+xml" href="/vite.svg" /> -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Joel's Store</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="h-store/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path=".gitignore">
.vscode
</file>

<file path="README.md">
# Hardware-Store
</file>

<file path="backend/h_backend/api/views.py">
from rest_framework import generics, filters, status
from rest_framework.response import Response
from rest_framework.views import APIView
from django_filters.rest_framework import DjangoFilterBackend
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo, Cart, CartItem
from .serializers import (
    CategorySerializer,
    ProductSerializer,
    ProductListSerializer,
    SlideSerializer,
    CompanyInfoSerializer,
    CompanyLogoSerializer,
    CartSerializer,
    CartItemSerializer,
)


class CategoryListView(generics.ListAPIView):
    """
    GET /api/categories/
    Returns all active categories
    """
    queryset = Category.objects.all()
    serializer_class = CategorySerializer


class ProductListView(generics.ListAPIView):
    """
    GET /api/products/
    GET /api/products/?category=plumbing-piping
    GET /api/products/?search=cement
    
    Returns all active products with optional filtering
    """
    serializer_class = ProductListSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['category__slug', 'is_featured', 'is_bestseller']
    search_fields = ['name', 'company', 'description']
    
    def get_queryset(self):
        queryset = Product.objects.filter(is_active=True).select_related('category')
        
        # Filter by category slug if provided
        category_slug = self.request.query_params.get('category', None)
        if category_slug:
            queryset = queryset.filter(category__slug=category_slug)
        
        return queryset


class ProductDetailView(generics.RetrieveAPIView):
    """
    GET /api/products/<id>/
    Returns detailed information about a single product
    """
    queryset = Product.objects.filter(is_active=True)
    serializer_class = ProductSerializer


class FeaturedProductsView(generics.ListAPIView):
    """
    GET /api/products/featured/
    Returns only featured products for homepage
    """
    queryset = Product.objects.filter(is_active=True, is_featured=True).select_related('category')
    serializer_class = ProductListSerializer


class LatestProductsView(generics.ListAPIView):
    """
    GET /api/products/latest/
    Returns the 8 newest products for homepage
    """
    queryset = Product.objects.filter(is_active=True).select_related('category')[:8]
    serializer_class = ProductListSerializer


class BestSellerProductsView(generics.ListAPIView):
    """
    GET /api/products/bestsellers/
    Returns best selling products for homepage
    """
    queryset = Product.objects.filter(is_active=True, is_bestseller=True).select_related('category')
    serializer_class = ProductListSerializer


class SlideListView(generics.ListAPIView):
    """
    GET /api/slides/
    Returns all active slides for the homepage hero slider
    """
    queryset = Slide.objects.filter(is_active=True)
    serializer_class = SlideSerializer
    
    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context


class CompanyInfoView(APIView):
    """
    GET /api/company-info/
    Returns company contact information and social media links
    """
    def get(self, request):
        company_info = CompanyInfo.load()
        serializer = CompanyInfoSerializer(company_info)
        return Response(serializer.data)


class CompanyLogoListView(generics.ListAPIView):
    """
    GET /api/company-logos/
    Returns all active company/partner logos for scrolling section
    """
    queryset = CompanyLogo.objects.filter(is_active=True)
    serializer_class = CompanyLogoSerializer


# ============================================
# NEW CART VIEW (PUBLIC - NO AUTHENTICATION)
# ============================================

class CartView(APIView):
    """
    Unified Cart View handling all cart operations
    PUBLIC - No authentication required
    
    GET    /api/cart/           - Get current cart
    POST   /api/cart/           - Add item to cart
    PUT    /api/cart/           - Update item quantity
    DELETE /api/cart/           - Remove item from cart
    """
    
    # No authentication required - this is a public endpoint
    authentication_classes = []
    permission_classes = []
    
    def _get_cart(self, request):
        """
        Private helper method to get or create cart for current session.
        Ensures session exists and returns the associated cart.
        """
        # Ensure session exists and get session key
        if not request.session.session_key:
            request.session.create()
        
        session_key = request.session.session_key
        
        # Get or create cart for this session
        cart, created = Cart.objects.get_or_create(session_key=session_key)
        
        return cart
    
    def get(self, request):
        """
        GET /api/cart/
        Returns the current cart with all items
        """
        try:
            cart = self._get_cart(request)
            serializer = CartSerializer(cart, context={'request': request})
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def post(self, request):
        """
        POST /api/cart/
        Add item to cart or increase quantity if already exists
        
        Body: {
            "product_id": 1,
            "quantity": 2  (optional, defaults to 1)
        }
        """
        try:
            # Get data from request
            product_id = request.data.get('product_id')
            quantity = request.data.get('quantity', 1)
            
            # Validation
            if not product_id:
                return Response(
                    {'error': 'product_id is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            try:
                quantity = int(quantity)
                if quantity < 1:
                    raise ValueError
            except (ValueError, TypeError):
                return Response(
                    {'error': 'quantity must be a positive integer'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Check if product exists
            try:
                product = Product.objects.get(id=product_id, is_active=True)
            except Product.DoesNotExist:
                return Response(
                    {'error': 'Product not found'},
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Get or create cart
            cart = self._get_cart(request)
            
            # Get or create cart item
            cart_item, created = CartItem.objects.get_or_create(
                cart=cart,
                product=product,
                defaults={'quantity': quantity}
            )
            
            # If item already exists, increase quantity
            if not created:
                cart_item.quantity += quantity
                cart_item.save()
            
            # Return updated cart
            serializer = CartSerializer(cart, context={'request': request})
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def put(self, request):
        """
        PUT /api/cart/
        Update quantity of specific cart item
        
        Body: {
            "item_id": 1,
            "quantity": 3
        }
        
        If quantity is 0, item will be deleted
        """
        try:
            # Get data from request
            item_id = request.data.get('item_id')
            quantity = request.data.get('quantity')
            
            # Validation
            if not item_id:
                return Response(
                    {'error': 'item_id is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            if quantity is None:
                return Response(
                    {'error': 'quantity is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            try:
                quantity = int(quantity)
                if quantity < 0:
                    raise ValueError
            except (ValueError, TypeError):
                return Response(
                    {'error': 'quantity must be a non-negative integer'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get cart
            cart = self._get_cart(request)
            
            # Find cart item
            try:
                cart_item = CartItem.objects.get(id=item_id, cart=cart)
            except CartItem.DoesNotExist:
                return Response(
                    {'error': 'Cart item not found'},
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Update or delete based on quantity
            if quantity == 0:
                cart_item.delete()
            else:
                cart_item.quantity = quantity
                cart_item.save()
            
            # Return updated cart
            serializer = CartSerializer(cart, context={'request': request})
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def delete(self, request):
        """
        DELETE /api/cart/
        Remove specific item from cart
        
        Body: {
            "item_id": 1
        }
        """
        try:
            # Get data from request
            item_id = request.data.get('item_id')
            
            # Validation
            if not item_id:
                return Response(
                    {'error': 'item_id is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get cart
            cart = self._get_cart(request)
            
            # Find and delete cart item
            try:
                cart_item = CartItem.objects.get(id=item_id, cart=cart)
                cart_item.delete()
            except CartItem.DoesNotExist:
                return Response(
                    {'error': 'Cart item not found'},
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Return updated cart
            serializer = CartSerializer(cart, context={'request': request})
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
</file>

<file path="backend/h_backend/requirements.txt">
asgiref==3.10.0
Django==5.2.7
django-cors-headers==4.9.0
django-filter==25.2
djangorestframework==3.16.1
pillow==12.0.0
sqlparse==0.5.3
whitenoise==6.11.0
</file>

<file path="h-store/src/components/common/CompanyLogos.jsx">
import React, { useEffect, useState } from "react";

import { getCompanyLogos } from "../../api/services";

const CompanyLogos = () => {
  const [logos, setLogos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchLogos = async () => {
      try {
        setLoading(true);
        const data = await getCompanyLogos();
        setLogos(Array.isArray(data) ? data : data.results || []);
        setError(null);
      } catch (err) {
        console.error("Error fetching company logos:", err);
        setError("Failed to load company logos");
      } finally {
        setLoading(false);
      }
    };

    fetchLogos();
  }, []);

  return (
    <div className="w-full my-32">
      {/* Top Divider */}
      <hr className="border-gray-300 mb-6" />

      {/* Logos Container */}
      <div className="overflow-hidden relative flex items-center">
        {loading ? (
          <div className="flex gap-8 w-full justify-center">
            {[1, 2, 3, 4, 5, 6].map((i) => (
              <div
                key={i}
                className="flex-shrink-0 w-40 h-20 bg-gray-200 animate-pulse rounded"
              ></div>
            ))}
          </div>
        ) : error ? (
          <div className="text-center w-full text-red-500 py-6">{error}</div>
        ) : logos.length === 0 ? (
          <div className="text-center w-full text-gray-500 py-6">
            No company logos available.
          </div>
        ) : (
          <div className="flex animate-scroll gap-8">
            {logos.concat(logos).map((logo, index) => (
              <div
                key={index}
                className="flex-shrink-0 w-40 h-20 bg-white shadow flex items-center justify-center rounded"
              >
                {logo.logo ? (
                  <img
                    src={logo.logo}
                    alt={logo.name || `Logo ${index + 1}`}
                    className="max-h-full max-w-full object-contain"
                  />
                ) : (
                  <span className="text-gray-500 text-sm font-semibold">
                    {logo.name || "No Logo"}
                  </span>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Bottom Divider */}
      <hr className="border-gray-300 mt-6" />

      {/* Scroll Animation */}
      <style jsx>{`
        @keyframes scroll {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%);
          }
        }
        .animate-scroll {
          display: flex;
          width: max-content;
          animation: scroll 20s linear infinite;
        }
      `}</style>
    </div>
  );
};

export default CompanyLogos;
</file>

<file path="h-store/src/components/common/FeaturedProducts.jsx">
import React, { useEffect, useState } from "react";

import { getFeaturedProducts } from "../../api/services";

const FeaturedProducts = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch featured products from API
  useEffect(() => {
    const fetchFeaturedProducts = async () => {
      try {
        setLoading(true);
        const data = await getFeaturedProducts();

        // Handle both array and paginated response
        let productsArray = [];
        if (Array.isArray(data)) {
          productsArray = data;
        } else if (data && data.results && Array.isArray(data.results)) {
          productsArray = data.results;
        }

        // Take only first 3 featured products
        setProducts(productsArray.slice(0, 3));
        setError(null);
      } catch (err) {
        console.error("Error fetching featured products:", err);
        setError("Failed to load featured products");
        setProducts([]);
      } finally {
        setLoading(false);
      }
    };

    fetchFeaturedProducts();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3].map((i) => (
            <div
              key={i}
              className="bg-gray-200 animate-pulse aspect-[4/5] rounded-lg"
            ></div>
          ))}
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="text-center py-12">
          <p className="text-red-500">{error}</p>
        </div>
      </div>
    );
  }

  // No products - show message instead of hiding
  if (products.length === 0) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <p className="text-gray-500">
            No featured products available. Please mark some products as
            featured in the admin panel.
          </p>
        </div>
      </div>
    );
  }

  // Display featured products
  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <a
            key={product.id}
            href={`/products/${product.category_slug || ""}`}
            className="relative group overflow-hidden shadow-lg transform transition duration-300 hover:scale-105"
          >
            {/* Product Image */}
            <div className="w-[85%] mx-auto aspect-[4/5] bg-black">
              {product.thumbnail ? (
                <img
                  src={product.thumbnail}
                  alt={product.name}
                  className="w-full h-full object-cover group-hover:opacity-90 transition duration-300"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-white text-sm">
                  Image Coming Soon
                </div>
              )}
            </div>

            {/* Overlay text */}
            <div className="absolute inset-0 flex flex-col items-center px-4 pt-4">
              <p className="text-xs sm:text-sm font-semibold uppercase text-white bg-[#1228e1] px-2 py-1 mb-2">
                Featured Product
              </p>
              <h3 className="text-lg md:text-xl font-bold text-white drop-shadow-lg">
                {product.name}
              </h3>
              <p className="text-sm text-white drop-shadow-lg mt-2">
                {product.company}
              </p>
            </div>
          </a>
        ))}
      </div>
    </div>
  );
};

export default FeaturedProducts;
</file>

<file path="h-store/src/components/common/FlexSlider.jsx">
import { ChevronLeft, ChevronRight } from 'lucide-react';
import React, { useCallback, useEffect, useState } from 'react';

import { getSlides } from '../../api/services';

const FlexSlider = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const [slides, setSlides] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const interval = 8000;

  // Fetch slides from API
  useEffect(() => {
    const fetchSlides = async () => {
      try {
        setLoading(true);
        const data = await getSlides();
        // Handle both paginated (data.results) and non-paginated (data) responses
        const slidesData = Array.isArray(data) ? data : (data.results || []);
        setSlides(slidesData);
        setError(null);
      } catch (err) {
        console.error('Error fetching slides:', err);
        setError('Failed to load slides');
        setSlides([]); // Set empty array on error
      } finally {
        setLoading(false);
      }
    };

    fetchSlides();
  }, []);

  const nextSlide = useCallback(() => {
    if (isAnimating || slides.length === 0) return;
    setIsAnimating(true);
    setCurrentSlide((prev) => (prev + 1) % slides.length);
    setTimeout(() => setIsAnimating(false), 750);
  }, [isAnimating, slides.length]);

  const prevSlide = useCallback(() => {
    if (isAnimating || slides.length === 0) return;
    setIsAnimating(true);
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
    setTimeout(() => setIsAnimating(false), 750);
  }, [isAnimating, slides.length]);

  const goToSlide = (index) => {
    if (isAnimating || index === currentSlide) return;
    setIsAnimating(true);
    setCurrentSlide(index);
    setTimeout(() => setIsAnimating(false), 750);
  };

  // Auto-play
  useEffect(() => {
    if (slides.length === 0) return;
    const autoPlay = setInterval(() => {
      nextSlide();
    }, interval);

    return () => clearInterval(autoPlay);
  }, [nextSlide, slides.length]);

  // Keyboard navigation
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'ArrowRight') nextSlide();
      if (e.key === 'ArrowLeft') prevSlide();
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [nextSlide, prevSlide]);

  // Loading state
  if (loading) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px] bg-gray-200 rounded-lg animate-pulse flex items-center justify-center">
          <p className="text-gray-500">Loading slides...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px] bg-red-50 rounded-lg flex items-center justify-center">
          <p className="text-red-500">{error}</p>
        </div>
      </div>
    );
  }

  // No slides
  if (slides.length === 0) {
    return null;
  }

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
      <div className="relative w-full overflow-hidden bg-gray-900 rounded-lg shadow-xl group">
        {/* Slides */}
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px]">
          {slides.map((slide, index) => (
            <div
              key={slide.id}
              className={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
                index === currentSlide ? 'opacity-100 z-10' : 'opacity-0 z-0'
              }`}
            >
              <img
                src={slide.image}
                alt={slide.title}
                className="w-full h-full object-cover"
              />

              {/* Content */}
              <div className="absolute inset-0 flex items-center justify-center text-center text-white px-4 sm:px-6 lg:px-8">
                <div className="max-w-3xl mx-auto">
                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-200'
                        : 'opacity-0 translate-y-12'
                    }`}
                  >
                    <p className="text-xs sm:text-sm md:text-base lg:text-lg font-semibold uppercase tracking-wider mb-3 md:mb-4 lg:mb-6 text-blue-200">
                      {slide.subtitle}
                    </p>
                  </div>

                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-300'
                        : 'opacity-0 translate-y-12'
                    }`}
                  >
                    <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold uppercase leading-tight mb-4 md:mb-6 lg:mb-8">
                      {slide.title}
                      {slide.title_span && (
                        <span className="block text-white">{slide.title_span}</span>
                      )}
                    </h1>
                  </div>

                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-500'
                        : 'opacity-0 translate-y-8'
                    }`}
                  >
                    <a
                      href={slide.link}
                      className="inline-block bg-[#1228e1] text-white hover:bg-white hover:text-[#1228e1] px-6 md:px-8 py-3 md:py-4 font-semibold uppercase tracking-wide transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl rounded-sm"
                    >
                      {slide.button_text}
                    </a>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Navigation Arrows */}
        <div className="absolute inset-y-0 left-0 flex items-center z-30">
          <button
            onClick={prevSlide}
            disabled={isAnimating}
            className="ml-4 w-12 h-12 bg-white bg-opacity-90 hover:bg-opacity-100 border border-gray-200 rounded-full flex items-center justify-center text-gray-800 hover:text-[#1228e1] transition-all duration-300 transform hover:scale-110 shadow-lg hover:shadow-xl opacity-80 hover:opacity-100 disabled:opacity-30 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-6 h-6" />
          </button>
        </div>

        <div className="absolute inset-y-0 right-0 flex items-center z-30">
          <button
            onClick={nextSlide}
            disabled={isAnimating}
            className="mr-4 w-12 h-12 bg-white bg-opacity-90 hover:bg-opacity-100 border border-gray-200 rounded-full flex items-center justify-center text-gray-800 hover:text-[#1228e1] transition-all duration-300 transform hover:scale-110 shadow-lg hover:shadow-xl opacity-80 hover:opacity-100 disabled:opacity-30 disabled:cursor-not-allowed"
          >
            <ChevronRight className="w-6 h-6" />
          </button>
        </div>

        {/* Dots */}
        <div className="absolute bottom-4 md:bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20">
          {slides.map((_, index) => (
            <button
              key={index}
              onClick={() => goToSlide(index)}
              disabled={isAnimating}
              className={`w-3 h-3 md:w-4 md:h-4 rounded-full transition-all duration-500 border-2 ${
                index === currentSlide
                  ? 'bg-[#1228e1] border-[#1228e1] scale-110'
                  : 'bg-white bg-opacity-60 border-white hover:bg-opacity-80'
              } disabled:opacity-50 shadow-sm`}
            />
          ))}
        </div>

        {/* Counter */}
        <div className="absolute top-4 right-4 bg-black bg-opacity-70 text-white px-3 py-1.5 text-sm font-medium shadow-lg rounded-sm">
          {currentSlide + 1} / {slides.length}
        </div>
      </div>
    </div>
  );
};

export default FlexSlider;
</file>

<file path="h-store/src/components/common/FloatingActions.jsx">
import React, { useEffect, useState } from "react";

import { ArrowUpCircle } from "lucide-react";
import { FaWhatsapp } from "react-icons/fa";

const FloatingActions = ({ phoneNumber = "254700000000", message = "Hello!" }) => {
  const [showTop, setShowTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const whatsappLink = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;

  return (
    <div className="fixed bottom-6 right-6 z-50 flex flex-col space-y-3 items-end">
      {/* WhatsApp Button */}
      <a
        href={whatsappLink}
        target="_blank"
        rel="noopener noreferrer"
        className="flex items-center border border-gray-300 rounded-full shadow-lg px-3 py-2 text-white bg-[#25D366] hover:bg-[#25D366] hover:text-black transition-colors duration-300"
        title="Chat with us on WhatsApp"
      >
        <FaWhatsapp className="w-6 h-6 mr-2 transition-colors duration-300" />
        <span className="font-semibold text-sm">Chat Us on WhatsApp</span>
      </a>

      {/* Back to Top Button */}
      <div
        className={`transform transition-all duration-500 ${
          showTop ? "opacity-100 translate-y-0" : "opacity-0 translate-y-6 pointer-events-none"
        }`}
      >
        <button
          onClick={scrollToTop}
          className="flex items-center justify-center w-12 h-12 bg-[#1228e1] text-white rounded-full shadow-lg hover:bg-blue-700 transition"
          title="Back to top"
        >
          <ArrowUpCircle className="w-6 h-6" />
        </button>
      </div>
    </div>
  );
};

export default FloatingActions;
</file>

<file path="h-store/src/components/common/InfoSection.jsx">
import { Headphones, ShieldCheck, Truck } from "lucide-react";

import React from "react";

const InfoSection = () => {
  const infoItems = [
    {
      id: 1,
      icon: Truck,
      title: "Nationwide Delivery",
      description: "Fast and reliable delivery everywhere.",
    },
    {
      id: 2,
      icon: ShieldCheck,
      title: "Quality Assurance",
      description: "Trusted products with top quality.",
    },
    {
      id: 3,
      icon: Headphones,
      title: "24/7 Support",
      description: "Always available to help you.",
    },
  ];

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-16">
      <div className="grid grid-cols-1 md:grid-cols-3 divide-y md:divide-y-0 md:divide-x divide-gray-300">
        {infoItems.map((item) => (
          <div
            key={item.id}
            className="flex items-center space-x-4 p-6 group"
          >
            <item.icon className="w-10 h-10 text-black transition-colors duration-300 group-hover:text-[#1228e1]" />
            <div className="flex flex-col justify-center">
              <h3 className="text-base md:text-lg font-bold uppercase text-black">
                {item.title}
              </h3>
              <p className="text-gray-600 text-sm mt-1">{item.description}</p>
            </div>
          </div>
        ))}
      </div>
      {/* Horizontal Divider */}
      <div className="border-t border-gray-300 mt-12"></div>
    </div>
  );
};

export default InfoSection;
</file>

<file path="h-store/src/components/common/LatestsProducts.jsx">
import React, { useEffect, useState } from "react";
import {
  getBestSellerProducts,
  getFeaturedProducts,
  getLatestProducts,
} from "../../api/services";

import ProductCard from "../common/ProductCard";

const LatestProducts = () => {
  const [activeTab, setActiveTab] = useState("New Arrivals");
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch products based on active tab
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      setError(null);

      try {
        let data = [];
        if (activeTab === "New Arrivals") {
          data = await getLatestProducts();
        } else if (activeTab === "Featured") {
          data = await getFeaturedProducts();
        } else if (activeTab === "Best Sellers") {
          data = await getBestSellerProducts();
        }

        // Handle both array and paginated responses
        const list = Array.isArray(data)
          ? data
          : data?.results && Array.isArray(data.results)
          ? data.results
          : [];

        setProducts(list);
      } catch (err) {
        console.error("Error loading products:", err);
        setError("Failed to load products. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [activeTab]);

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-12">
      {/* Heading */}
      <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-6 text-center">
        Latest Products
      </h2>

      {/* Tabs */}
      <div className="flex justify-center space-x-6 mb-8">
        {["New Arrivals", "Featured", "Best Sellers"].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 font-medium transition ${
              activeTab === tab
                ? "text-[#1228e1] border-b-2 border-[#1228e1]"
                : "text-gray-600 hover:text-[#1228e1]"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>

      {/* Loading State */}
      {loading && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          {[1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className="bg-gray-200 animate-pulse aspect-[4/5] rounded-lg"
            ></div>
          ))}
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="text-center text-red-500 py-8">{error}</div>
      )}

      {/* No Products */}
      {!loading && !error && products.length === 0 && (
        <div className="text-center text-gray-500 py-8">
          No products found for this category.
        </div>
      )}

      {/* Product Grid */}
      {!loading && !error && products.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          {products.map((product) => (
            <ProductCard
              key={product.id}
              image={product.thumbnail || "https://via.placeholder.com/300x400"}
              company={product.company}
              name={product.name}
              price={product.price}
            />
          ))}
        </div>
      )}

      {/* All Products Button */}
      <div className="text-center">
        <a
          href="/products"
          className="inline-block bg-[#1228e1] text-white px-6 py-3 font-semibold uppercase tracking-wide hover:bg-white hover:text-[#1228e1] border border-[#1228e1] transition"
        >
          All Products
        </a>
      </div>
    </div>
  );
};

export default LatestProducts;
</file>

<file path="h-store/src/components/common/ProductModal.jsx">
import { Heart, Minus, Plus, ShoppingCart, X } from "lucide-react";
import React, { useEffect, useState } from "react";

import ReactDOM from "react-dom";
import { getCompanyInfo } from "../../api/services";

const ProductModal = ({ isOpen, onClose, product }) => {
  const [showModal, setShowModal] = useState(false);
  const [quantity, setQuantity] = useState(1);
  const [companyInfo, setCompanyInfo] = useState(null);
  const [isFavorite, setIsFavorite] = useState(false);
  const [isAddingToCart, setIsAddingToCart] = useState(false);
  const [showAddedMessage, setShowAddedMessage] = useState(false);
  const [mainImage, setMainImage] = useState(null);

  // Animate open/close
  useEffect(() => {
    if (isOpen) {
      setShowModal(true);
      setQuantity(1); // Reset quantity when modal opens
      setMainImage(product?.thumbnail || product?.images?.[0]);
    } else {
      const timer = setTimeout(() => setShowModal(false), 200);
      return () => clearTimeout(timer);
    }
  }, [isOpen, product]);

  // Fetch company info for WhatsApp integration
  useEffect(() => {
    const fetchCompanyInfo = async () => {
      try {
        const data = await getCompanyInfo();
        setCompanyInfo(data);
      } catch (err) {
        console.error("Error fetching company info:", err);
      }
    };

    fetchCompanyInfo();
  }, []);

  // Close on ESC
  useEffect(() => {
    const handleEsc = (e) => e.key === "Escape" && onClose();
    document.addEventListener("keydown", handleEsc);
    return () => document.removeEventListener("keydown", handleEsc);
  }, [onClose]);

  if (!showModal || !product) return null;

  const handleQuantityChange = (change) => {
    setQuantity((prev) => Math.max(1, prev + change));
  };

  const subtotal = (parseFloat(product.price) * quantity).toFixed(2);

  // WhatsApp inquiry message
  const handleWhatsAppInquiry = () => {
    if (!companyInfo) return;

    const message = `Hello! I'm interested in:\n\nProduct: ${product.name}\nBrand: ${product.company}\nQuantity: ${quantity}\nPrice: Ksh ${product.price}\n\nPlease provide more information.`;
    const whatsappLink = `https://wa.me/${companyInfo.whatsapp_number}?text=${encodeURIComponent(
      message
    )}`;
    window.open(whatsappLink, "_blank");
  };

  const handleToggleFavorite = () => {
    setIsFavorite(!isFavorite);
    console.log(`${isFavorite ? "Removed from" : "Added to"} favorites:`, product.id);
  };

  const handleAddToCart = () => {
    setIsAddingToCart(true);

    setTimeout(() => {
      setIsAddingToCart(false);
      setShowAddedMessage(true);

      console.log("Added to cart:", {
        productId: product.id,
        quantity: quantity,
        price: product.price,
      });

      setTimeout(() => setShowAddedMessage(false), 2000);
    }, 500);
  };

  const handleCheckout = () => {
    alert(
      `Checkout feature coming soon!\n\nProduct: ${product.name}\nQuantity: ${quantity}\nTotal: Ksh ${subtotal}`
    );
  };

  return ReactDOM.createPortal(
    <div
      className={`fixed inset-0 z-50 flex items-center justify-center bg-black/50 
        transition-opacity duration-200 ${
          isOpen ? "opacity-100" : "opacity-0"
        }`}
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div
        className={`relative bg-white w-[95%] max-w-4xl rounded-2xl shadow-lg overflow-hidden 
          flex flex-col md:flex-row transform transition-transform duration-200 max-h-[90vh] ${
            isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"
          }`}
        onClick={(e) => e.stopPropagation()}
      >
        {/* LEFT SECTION — IMAGES */}
        <div className="md:w-1/2 p-4 flex flex-col items-center overflow-y-auto">
          {/* Main Image */}
          <img
            id="mainProductImage"
            src={
              mainImage ||
              product.thumbnail ||
              "https://via.placeholder.com/400x300"
            }
            alt={product.name}
            className="w-full max-h-[400px] object-contain rounded-lg mb-3"
            onError={(e) => {
              e.target.src = "https://via.placeholder.com/400x300?text=No+Image";
            }}
          />

          {/* Image Gallery */}
          {product.images && product.images.length > 0 && (
            <div className="grid grid-cols-4 gap-2 mt-2">
              {product.images.map((img, index) => (
                <img
                  key={index}
                  src={img}
                  alt={`${product.name} ${index + 1}`}
                  className={`w-20 h-20 object-cover rounded-md border cursor-pointer transition ${
                    mainImage === img
                      ? "border-[#1228e1]"
                      : "border-gray-200 hover:border-[#1228e1]"
                  }`}
                  onError={(e) => {
                    e.target.src =
                      "https://via.placeholder.com/80x80?text=No+Image";
                  }}
                  onClick={() => setMainImage(img)}
                />
              ))}
            </div>
          )}

          {/* Fallback for legacy image fields */}
          {(!product.images || product.images.length === 0) &&
            (product.image_1 || product.image_2) && (
              <div className="flex space-x-2 mt-3">
                {[product.image_1, product.image_2]
                  .filter(Boolean)
                  .map((img, index) => (
                    <img
                      key={index}
                      src={img}
                      alt={`Additional view ${index + 1}`}
                      className="w-20 h-20 object-cover rounded-md border cursor-pointer hover:border-[#1228e1]"
                      onClick={() => setMainImage(img)}
                    />
                  ))}
              </div>
            )}
        </div>

        {/* RIGHT SECTION — DETAILS */}
        <div className="md:w-1/2 p-6 flex flex-col overflow-y-auto">
          {/* Close button */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 bg-gray-100 rounded-full hover:bg-gray-200 z-10"
            aria-label="Close"
          >
            <X className="w-5 h-5" />
          </button>

          {/* Favorite button */}
          <button
            onClick={handleToggleFavorite}
            className={`absolute top-4 right-16 p-2 rounded-full transition-all duration-200 z-10 ${
              isFavorite
                ? "bg-red-50 text-red-500 hover:bg-red-100"
                : "bg-gray-100 text-gray-600 hover:bg-gray-200"
            }`}
            aria-label={isFavorite ? "Remove from favorites" : "Add to favorites"}
            title={isFavorite ? "Remove from favorites" : "Add to favorites"}
          >
            <Heart
              className={`w-5 h-5 transition-all duration-200 ${
                isFavorite ? "fill-current" : ""
              }`}
            />
          </button>

          <h2 className="text-xl font-bold text-gray-900 pr-20">{product.name}</h2>
          <p className="text-sm text-gray-500 mt-1">Brand: {product.company}</p>
          {product.category_name && (
            <p className="text-sm text-gray-500">Category: {product.category_name}</p>
          )}

          {/* Price */}
          <div className="mt-4">
            <span className="text-2xl font-bold text-[#1228e1]">
              Ksh {product.price}
            </span>
          </div>

          {/* Description */}
          {product.description && (
            <div className="mt-4">
              <h3 className="font-semibold text-gray-900 mb-2">Description</h3>
              <p className="text-sm text-gray-600">{product.description}</p>
            </div>
          )}

          {/* Quantity Selector */}
          <div className="mt-4">
            <label className="block text-sm font-semibold text-gray-900 mb-2">
              Quantity
            </label>
            <div className="flex items-center space-x-3">
              <button
                onClick={() => handleQuantityChange(-1)}
                className="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition"
              >
                <Minus className="w-4 h-4" />
              </button>
              <span className="w-12 text-center font-semibold">{quantity}</span>
              <button
                onClick={() => handleQuantityChange(1)}
                className="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-100 transition"
              >
                <Plus className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Cart Summary */}
          <div className="mt-6 border-t pt-4">
            <div className="flex justify-between text-sm text-gray-600">
              <span>Quantity</span>
              <span>{quantity}</span>
            </div>
            <div className="flex justify-between text-lg text-gray-900 font-semibold mt-2">
              <span>Subtotal</span>
              <span>Ksh {subtotal}</span>
            </div>
          </div>

          {/* Success Message */}
          {showAddedMessage && (
            <div className="mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg flex items-center space-x-2">
              <ShoppingCart className="w-5 h-5" />
              <span className="text-sm font-medium">Added to cart successfully!</span>
            </div>
          )}

          {/* Action Buttons */}
          <div className="mt-6 space-y-3">
            <button
              onClick={handleAddToCart}
              disabled={isAddingToCart}
              className="w-full py-3 rounded-lg bg-[#1228e1] text-white font-semibold hover:bg-[#0f20b3] transition-all duration-200 flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isAddingToCart ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>Adding...</span>
                </>
              ) : (
                <>
                  <ShoppingCart className="w-5 h-5" />
                  <span>Add to Cart</span>
                </>
              )}
            </button>

            <button
              onClick={handleCheckout}
              className="w-full py-3 rounded-lg bg-green-600 text-white font-semibold hover:bg-green-700 transition-all duration-200"
            >
              Proceed to Checkout
            </button>

            <button
              onClick={handleWhatsAppInquiry}
              className="w-full py-3 rounded-lg bg-[#25D366] text-white font-semibold hover:bg-[#20bd5a] transition-all duration-200 flex items-center justify-center space-x-2"
            >
              <span>💬 Inquire via WhatsApp</span>
            </button>

            <button
              onClick={onClose}
              className="w-full py-3 rounded-lg border border-gray-300 hover:bg-gray-100 font-semibold transition-all duration-200"
            >
              Continue Shopping
            </button>
          </div>

          {/* Trust Indicators */}
          <div className="mt-6 flex flex-wrap gap-2 text-xs text-gray-500">
            <span className="px-3 py-1 border rounded-full">🔒 Secure</span>
            <span className="px-3 py-1 border rounded-full">✔ Verified</span>
            <span className="px-3 py-1 border rounded-full">🚚 Nationwide Delivery</span>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default ProductModal;
</file>

<file path="h-store/src/components/common/SubcategoriesSection.jsx">
import React from "react";

const SubcategoriesSection = ({ subcategories, onSelect }) => {
  return (
    <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
      {/* Section Title */}
      <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-6 relative inline-block">
        Subcategories
        <span className="block w-16 h-1 bg-blue-600 mt-1 rounded"></span>
      </h2>

      {/* Subcategory Cards */}
      <div
        className="grid gap-6 sm:gap-8"
        style={{
          gridTemplateColumns: `repeat(auto-fill, minmax(150px, 1fr))`,
        }}
      >
        {subcategories.map((subcat) => (
          <div
            key={subcat.id}
            className="group relative bg-white rounded-2xl shadow-sm hover:shadow-2xl overflow-hidden transform hover:-translate-y-2 transition-all duration-500 cursor-pointer"
            onClick={() => onSelect(subcat.slug)}
          >
            {/* Category Image */}
            <div className="h-40 w-full bg-gray-200 relative overflow-hidden">
              {subcat.image ? (
                <img
                  src={subcat.image}
                  alt={subcat.name}
                  className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                />
              ) : (
                <span className="absolute inset-0 flex items-center justify-center text-gray-600 font-semibold text-sm">
                  No Image
                </span>
              )}

              {/* Overlay effect */}
              <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            </div>

            {/* Category Name */}
            <div className="h-16 flex items-center justify-center bg-white text-center px-2">
              <span className="font-semibold text-gray-800 text-sm sm:text-base group-hover:text-blue-600 transition-colors duration-500">
                {subcat.name}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SubcategoriesSection;
</file>

<file path="h-store/src/components/navigation/Footer.jsx">
import { FaFacebook, FaInstagram, FaTiktok, FaWhatsapp } from "react-icons/fa";
import { Mail, MapPin, Phone } from "lucide-react";
import React, { useEffect, useState } from "react";
import { getCategories, getCompanyInfo } from "../../api/services";

const Footer = () => {
  const [companyInfo, setCompanyInfo] = useState(null);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch company info
        const info = await getCompanyInfo();
        setCompanyInfo(info);

        // Fetch categories
        const cats = await getCategories();
        setCategories(Array.isArray(cats) ? cats : cats.results || []);
      } catch (err) {
        console.error("Error fetching footer data:", err);
      }
    };

    fetchData();
  }, []);

  return (
    <footer className="bg-white text-gray-800 pt-10 pb-6 border-t border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Product Categories */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Product Categories</h3>
          {categories.length > 0 ? (
            <ul className="space-y-2">
              {categories.slice(0, 10).map((category) => (
                <li key={category.id}>
                  <a
                    href={`/products/${category.slug}`}
                    className="hover:text-[#1228e1] transition-colors"
                  >
                    {category.name}
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            <div className="space-y-2 text-gray-400">
              <p>Loading categories...</p>
            </div>
          )}
        </div>

        {/* Contact Us */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Contact Us</h3>
          {companyInfo ? (
            <ul className="space-y-3">
              <li className="flex items-start space-x-2">
                <MapPin className="w-5 h-5 text-gray-600 flex-shrink-0 mt-0.5" />
                <span>{companyInfo.address}</span>
              </li>
              <li className="flex items-center space-x-2">
                <Mail className="w-5 h-5 text-gray-600" />
                <a
                  href={`mailto:${companyInfo.email}`}
                  className="hover:text-[#1228e1] transition-colors"
                >
                  {companyInfo.email}
                </a>
              </li>
              <li className="flex items-center space-x-2">
                <Phone className="w-5 h-5 text-gray-600" />
                <a
                  href={`tel:${companyInfo.phone}`}
                  className="hover:text-[#1228e1] transition-colors"
                >
                  {companyInfo.phone}
                </a>
              </li>
            </ul>
          ) : (
            <div className="space-y-3 text-gray-400">
              <p>Loading contact info...</p>
            </div>
          )}
        </div>

        {/* My Account */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Quick Links</h3>
          <ul className="space-y-2">
            <li>
              <a href="/" className="hover:text-[#1228e1] transition-colors">
                Home
              </a>
            </li>
            <li>
              <a href="/products" className="hover:text-[#1228e1] transition-colors">
                All Products
              </a>
            </li>
            <li>
              <a href="/contact" className="hover:text-[#1228e1] transition-colors">
                Contact Us
              </a>
            </li>
          </ul>
        </div>
      </div>

      {/* Social Media Icons */}
      {companyInfo && (
        <div className="mt-10 flex justify-center space-x-6">
          {companyInfo.instagram_url && (
            <a
              href={companyInfo.instagram_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="Instagram"
            >
              <FaInstagram className="w-6 h-6" />
            </a>
          )}
          {companyInfo.tiktok_url && (
            <a
              href={companyInfo.tiktok_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="TikTok"
            >
              <FaTiktok className="w-6 h-6" />
            </a>
          )}
          {companyInfo.whatsapp_number && (
            <a
              href={`https://wa.me/${companyInfo.whatsapp_number}`}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="WhatsApp"
            >
              <FaWhatsapp className="w-6 h-6" />
            </a>
          )}
          {companyInfo.facebook_url && (
            <a
              href={companyInfo.facebook_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="Facebook"
            >
              <FaFacebook className="w-6 h-6" />
            </a>
          )}
        </div>
      )}

      {/* Footer Bottom */}
      <div className="mt-6 border-t border-gray-200 pt-4 text-center text-sm text-gray-500">
        © {new Date().getFullYear()} Hardware Store. All rights reserved.
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="h-store/src/components/navigation/Topbar.jsx">
import React, { useEffect, useState } from "react";

import { getCompanyInfo } from "../../api/services";

const TopBar = () => {
  const [companyInfo, setCompanyInfo] = useState(null);

  useEffect(() => {
    const fetchCompanyInfo = async () => {
      try {
        const data = await getCompanyInfo();
        setCompanyInfo(data);
      } catch (err) {
        console.error("Error fetching company info:", err);
      }
    };

    fetchCompanyInfo();
  }, []);

  return (
    <div className="w-full bg-[#1228e1] text-white text-sm px-6 py-2 flex items-center justify-between">
      {/* Left message */}
      <p>We do delivery across the country</p>

      {/* Contact info */}
      <div className="flex space-x-6">
        {companyInfo ? (
          <>
            <a 
              href={`mailto:${companyInfo.email}`} 
              className="hover:underline"
            >
              {companyInfo.email}
            </a>
            <a 
              href={`tel:${companyInfo.phone}`} 
              className="hover:underline"
            >
              {companyInfo.phone}
            </a>
          </>
        ) : (
          <span className="text-white/80">Loading...</span>
        )}
      </div>
    </div>
  );
};

export default TopBar;
</file>

<file path="h-store/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss(), ], 
  server: {
    host: true, // allow external access (important)
    allowedHosts: [
      'dalila-scrubbier-arrhythmically.ngrok-free.dev', // 👈 your ngrok domain
    ],
  },
})
</file>

<file path="backend/h_backend/api/serializers.py">
from rest_framework import serializers
from .models import Category, Product, Slide, CompanyInfo, CompanyLogo, Cart, CartItem


class CategorySerializer(serializers.ModelSerializer):
    """
    Serializer for Category model
    """
    image = serializers.SerializerMethodField()
    
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'image']
    
    def get_image(self, obj):
        request = self.context.get('request')
        if obj.image and hasattr(obj.image, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.image.url)
            return obj.image.url
        return None


class ProductSerializer(serializers.ModelSerializer):
    """
    Full Product serializer with category details
    """
    category_name = serializers.CharField(source='category.name', read_only=True)
    category_slug = serializers.CharField(source='category.slug', read_only=True)
    
    thumbnail = serializers.SerializerMethodField()
    image_1 = serializers.SerializerMethodField()
    image_2 = serializers.SerializerMethodField()
    
    class Meta:
        model = Product
        fields = [
            'id',
            'name',
            'company',
            'price',
            'description',
            'thumbnail',
            'image_1',
            'image_2',
            'category',
            'category_name',
            'category_slug',
            'is_featured',
            'is_bestseller',
            'is_active',
            'created_at',
        ]
    
    def get_thumbnail(self, obj):
        return self._get_image_url(obj.thumbnail)
    
    def get_image_1(self, obj):
        return self._get_image_url(obj.image_1)
    
    def get_image_2(self, obj):
        return self._get_image_url(obj.image_2)
    
    def _get_image_url(self, image_field):
        request = self.context.get('request')
        if image_field and hasattr(image_field, 'url'):
            if request is not None:
                return request.build_absolute_uri(image_field.url)
            return image_field.url
        return None


class ProductListSerializer(serializers.ModelSerializer):
    """
    Lighter serializer for product lists
    """
    category_name = serializers.CharField(source='category.name', read_only=True)
    category_slug = serializers.CharField(source='category.slug', read_only=True)
    thumbnail = serializers.SerializerMethodField()
    image_1 = serializers.SerializerMethodField()
    image_2 = serializers.SerializerMethodField()
    
    class Meta:
        model = Product
        fields = [
            'id',
            'name',
            'company',
            'price',
            'description',
            'thumbnail',
            'image_1',
            'image_2',
            'category_name',
            'category_slug',
            'is_featured',
            'is_bestseller',
        ]
    
    def get_thumbnail(self, obj):
        request = self.context.get('request')
        if obj.thumbnail and hasattr(obj.thumbnail, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.thumbnail.url)
            return obj.thumbnail.url
        return None
    
    def get_image_1(self, obj):
        request = self.context.get('request')
        if obj.image_1 and hasattr(obj.image_1, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.image_1.url)
            return obj.image_1.url
        return None
    
    def get_image_2(self, obj):
        request = self.context.get('request')
        if obj.image_2 and hasattr(obj.image_2, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.image_2.url)
            return obj.image_2.url
        return None


class SlideSerializer(serializers.ModelSerializer):
    """
    Serializer for Slide model
    """
    image = serializers.SerializerMethodField()
    
    class Meta:
        model = Slide
        fields = [
            'id',
            'title',
            'subtitle',
            'title_span',
            'button_text',
            'link',
            'image',
            'order',
        ]
    
    def get_image(self, obj):
        request = self.context.get('request')
        if obj.image and hasattr(obj.image, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.image.url)
            return obj.image.url
        return None


class CompanyInfoSerializer(serializers.ModelSerializer):
    """
    Serializer for Company Information
    """
    class Meta:
        model = CompanyInfo
        fields = [
            'phone',
            'email',
            'address',
            'whatsapp_number',
            'whatsapp_default_message',
            'instagram_url',
            'facebook_url',
            'tiktok_url',
        ]


class CompanyLogoSerializer(serializers.ModelSerializer):
    """
    Serializer for Company Logos
    """
    logo = serializers.SerializerMethodField()
    
    class Meta:
        model = CompanyLogo
        fields = ['id', 'name', 'logo', 'order']
    
    def get_logo(self, obj):
        request = self.context.get('request')
        if obj.logo and hasattr(obj.logo, 'url'):
            if request is not None:
                return request.build_absolute_uri(obj.logo.url)
            return obj.logo.url
        return None


# ============================================
# NEW CART SERIALIZERS
# ============================================

class CartItemSerializer(serializers.ModelSerializer):
    """
    Serializer for CartItem - includes full product details
    """
    # Nest the full product information
    product = ProductListSerializer(read_only=True)
    
    # Add calculated field for total price of this item
    total_item_price = serializers.SerializerMethodField()
    
    class Meta:
        model = CartItem
        fields = [
            'id',
            'product',
            'quantity',
            'total_item_price',
            'created_at',
        ]
        read_only_fields = ['id', 'created_at']
    
    def get_total_item_price(self, obj):
        """Calculate quantity * price for this cart item"""
        return float(obj.total_price)


class CartSerializer(serializers.ModelSerializer):
    """
    Serializer for Cart - includes all cart items and totals
    """
    # Nest all cart items with full details
    items = CartItemSerializer(many=True, read_only=True)
    
    # Calculated fields for cart summary
    item_count = serializers.SerializerMethodField()
    total_price = serializers.SerializerMethodField()
    
    class Meta:
        model = Cart
        fields = [
            'id',
            'session_key',
            'items',
            'item_count',
            'total_price',
            'created_at',
            'updated_at',
        ]
        read_only_fields = ['id', 'session_key', 'created_at', 'updated_at']
    
    def get_item_count(self, obj):
        """Sum of all quantities in cart"""
        return obj.item_count
    
    def get_total_price(self, obj):
        """Total price of all items in cart"""
        return float(obj.total_price)
</file>

<file path="backend/h_backend/h_backend/settings.py">
"""
Django settings for h_backend project.
"""

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 3rd Party Apps
    'rest_framework',
    'corsheaders',
    'django_filters',

    # Local Apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    
    # CORS - MUST be before CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',
    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

ROOT_URLCONF = 'h_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'h_backend.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Africa/Nairobi'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ============================================
# CORS Configuration (CRITICAL FOR CART)
# ============================================
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# CRITICAL: Allow credentials (cookies/sessions)
CORS_ALLOW_CREDENTIALS = True

# Allow specific headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


# ============================================
# Session Configuration (CRITICAL FOR CART)
# ============================================

# Use database-backed sessions (better for production)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Session cookie settings
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_COOKIE_HTTPONLY = True  # Cannot be accessed via JavaScript
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_SAMESITE = 'Lax'  # Important for CORS

# Save session on every request to keep it alive
SESSION_SAVE_EVERY_REQUEST = True

# CSRF settings (important for session-based cart)
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]


# ============================================
# Django REST Framework Configuration
# ============================================
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Public API
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 16,
    
    # Session authentication for cart
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}
</file>

<file path="h-store/src/components/common/ProductsGrid.jsx">
import React, { useState } from "react";

import ProductCard from "./ProductCard";

const ProductsGrid = ({ products, selectedCategory }) => {
  const productsPerPage = 16; // 4x4 grid
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(products.length / productsPerPage);

  const startIndex = (currentPage - 1) * productsPerPage;
  const currentProducts = products.slice(
    startIndex,
    startIndex + productsPerPage
  );

  return (
    <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 relative inline-block">
          {selectedCategory === "all"
            ? "All Products"
            : selectedCategory
                .replace(/-/g, " ")
                .replace(/\b\w/g, (c) => c.toUpperCase())}
          <span className="block w-16 h-1 bg-[#1228e1] mt-2 rounded"></span>
        </h2>
      </div>

      {/* Products Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
        {currentProducts.map((product) => (
          <ProductCard
            key={product.id}
            id={product.id}
            name={product.name}
            company={product.company}
            price={product.price}
            thumbnail={product.thumbnail}
            image_1={product.image_1}
            image_2={product.image_2}
            category_name={product.category_name}
            description={product.description}
          />
        ))}
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="mt-6 flex justify-center space-x-2">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button
              key={page}
              onClick={() => setCurrentPage(page)}
              className={`px-3 py-1 border ${
                page === currentPage
                  ? "bg-[#1228e1] text-white border-[#1228e1]"
                  : "bg-white text-gray-700 border-gray-300 hover:bg-gray-100"
              } rounded transition`}
            >
              {page}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ProductsGrid;
</file>

<file path="h-store/src/components/navigation/Navbar.jsx">
import { ChevronDown, Heart, Search, ShoppingCart, User } from "lucide-react";

import { Link } from "react-router-dom";
import Logo from "../../assets/Logo.png";
import React from "react";

const Navbar = () => {
  // Example counts (can be hooked to state later)
  const favCount = 0;
  const cartCount = 0;

  return (
    <nav className="w-full bg-white shadow-md px-6 py-4 flex items-center justify-between relative">
      {/* Logo */}
      <div className="flex items-center space-x-2">
        <Link to="/">
          <img src={Logo} alt="Logo" className="h-12 w-auto" />
        </Link>
      </div>

      {/* Links */}
      <ul className="flex space-x-8 font-medium text-black relative">
        <li>
          <Link
            to="/"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Home
          </Link>
        </li>

        {/* Products with Dropdown */}
        {/* Products with Dropdown */}
<li className="relative group cursor-pointer">
  <div className="flex items-center space-x-1 hover:text-[#1228e1] transition-colors duration-200">
    <Link to="/products">Products</Link>
    <ChevronDown size={16} />
  </div>

  {/* Dropdown Menu */}
  <ul className="absolute left-0 top-full mt-2 w-56 bg-white border border-gray-200 shadow-lg rounded-md opacity-0 group-hover:opacity-100 invisible group-hover:visible transition-all duration-200 z-50">
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/plumbing-piping">Plumbing & Piping</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/electrical">Electrical</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/carpentry">Carpentry</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/steel">Steel</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/glues">Glues</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/paints">Paints</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/gas">Gas</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/curtains">Curtains</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/cement">Cement</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/home-equipment">Home Equipment</Link>
    </li>
  </ul>
</li>


        <li>
          <Link
            to="/posts"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Posts
          </Link>
        </li>
        <li>
          <Link
            to="/contact"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Contact Us
          </Link>
        </li>
      </ul>

      {/* Icons */}
      <div className="flex space-x-6 text-black relative">
        <Search className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
        <User className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />

        {/* Favorites with badge */}
        <div className="relative">
          <Heart className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
          <span className="absolute -top-2 -right-2 bg-[#1228e1] text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full">
            {favCount}
          </span>
        </div>

        {/* Cart with badge */}
        <div className="relative">
          <ShoppingCart className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
          <span className="absolute -top-2 -right-2 bg-[#1228e1] text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full">
            {cartCount}
          </span>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
</file>

<file path="h-store/src/App.jsx">
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";

import Home from "./pages/Home";
import Products from "./pages/Products";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products/:subcategory?" element={<Products />} />
      </Routes>
    </Router>
  );
};

export default App;
</file>

<file path="h-store/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  api/
    api.js
    services.js
  assets/
    Logo.png
  components/
    common/
      CompanyLogos.jsx
      FeaturedProducts.jsx
      FlexSlider.jsx
      FloatingActions.jsx
      InfoSection.jsx
      LatestsProducts.jsx
      ProductCard.jsx
      ProductModal.jsx
      ProductsGrid.jsx
      ProductsHero.jsx
      SubcategoriesSection.jsx
      ThreeColumnSection.jsx
    navigation/
      Footer.jsx
      Navbar.jsx
      Topbar.jsx
  pages/
    Home.jsx
    Products.jsx
  App.css
  App.jsx
  index.css
  main.jsx
.gitignore
eslint.config.js
index.html
package.json
README.md
text.html
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/api/api.js">
// src/api.js
import axios from "axios";

// 1. Keep this export from your previous version.
// You NEED this for image paths.
export const backendUrl = "http://localhost:8000";

// 2. Define the API base URL
const BASE_URL = `${backendUrl}/api/`;

// 3. Create your new, robust axios instance
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000, // 10 seconds
  headers: {
    "Content-Type": "application/json",
  },
});

// 4. Keep your new interceptors (they are perfect)
api.interceptors.request.use(
  (config) => {
    // You can add auth tokens here later
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      console.error("API Error:", error.response.data);
    } else if (error.request) {
      console.error("Network Error:", error.request);
    } else {
      console.error("Error:", error.message);
    }
    return Promise.reject(error);
  }
);

// 5. Export the api instance
export default api;
</file>

<file path="src/api/services.js">
import api from './api';

// ========================================
// Categories
// ========================================
export const getCategories = async () => {
  const response = await api.get('/categories/');
  return response.data;
};

// ========================================
// Products
// ========================================
export const getAllProducts = async (params = {}) => {
  const response = await api.get('/products/', { params });
  return response.data;
};

export const getProductsByCategory = async (categorySlug) => {
  const response = await api.get('/products/', {
    params: { category: categorySlug }
  });
  return response.data;
};

export const getProductDetail = async (productId) => {
  const response = await api.get(`/products/${productId}/`);
  return response.data;
};

export const getFeaturedProducts = async () => {
  const response = await api.get('/products/featured/');
  return response.data;
};

export const getLatestProducts = async () => {
  const response = await api.get('/products/latest/');
  return response.data;
};

export const getBestSellerProducts = async () => {
  const response = await api.get('/products/bestsellers/');
  return response.data;
};

export const searchProducts = async (searchTerm) => {
  const response = await api.get('/products/', {
    params: { search: searchTerm }
  });
  return response.data;
};

// ========================================
// Homepage Content
// ========================================
export const getSlides = async () => {
  const response = await api.get('/slides/');
  return response.data;
};

export const getCompanyInfo = async () => {
  const response = await api.get('/company-info/');
  return response.data;
};

export const getCompanyLogos = async () => {
  const response = await api.get('/company-logos/');
  return response.data;
};
</file>

<file path="src/components/common/CompanyLogos.jsx">
import React, { useEffect, useState } from "react";

import { getCompanyLogos } from "../../api/services";

const CompanyLogos = () => {
  const [logos, setLogos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchLogos = async () => {
      try {
        setLoading(true);
        const data = await getCompanyLogos();
        setLogos(Array.isArray(data) ? data : data.results || []);
        setError(null);
      } catch (err) {
        console.error("Error fetching company logos:", err);
        setError("Failed to load company logos");
      } finally {
        setLoading(false);
      }
    };

    fetchLogos();
  }, []);

  return (
    <div className="w-full my-32">
      {/* Top Divider */}
      <hr className="border-gray-300 mb-6" />

      {/* Logos Container */}
      <div className="overflow-hidden relative flex items-center">
        {loading ? (
          <div className="flex gap-8 w-full justify-center">
            {[1, 2, 3, 4, 5, 6].map((i) => (
              <div
                key={i}
                className="flex-shrink-0 w-40 h-20 bg-gray-200 animate-pulse rounded"
              ></div>
            ))}
          </div>
        ) : error ? (
          <div className="text-center w-full text-red-500 py-6">{error}</div>
        ) : logos.length === 0 ? (
          <div className="text-center w-full text-gray-500 py-6">
            No company logos available.
          </div>
        ) : (
          <div className="flex animate-scroll gap-8">
            {logos.concat(logos).map((logo, index) => (
              <div
                key={index}
                className="flex-shrink-0 w-40 h-20 bg-white shadow flex items-center justify-center rounded"
              >
                {logo.logo ? (
                  <img
                    src={logo.logo}
                    alt={logo.name || `Logo ${index + 1}`}
                    className="max-h-full max-w-full object-contain"
                  />
                ) : (
                  <span className="text-gray-500 text-sm font-semibold">
                    {logo.name || "No Logo"}
                  </span>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Bottom Divider */}
      <hr className="border-gray-300 mt-6" />

      {/* Scroll Animation */}
      <style jsx>{`
        @keyframes scroll {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%);
          }
        }
        .animate-scroll {
          display: flex;
          width: max-content;
          animation: scroll 20s linear infinite;
        }
      `}</style>
    </div>
  );
};

export default CompanyLogos;
</file>

<file path="src/components/common/FeaturedProducts.jsx">
import React, { useEffect, useState } from "react";

import { getFeaturedProducts } from "../../api/services";

const FeaturedProducts = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch featured products from API
  useEffect(() => {
    const fetchFeaturedProducts = async () => {
      try {
        setLoading(true);
        const data = await getFeaturedProducts();

        // Handle both array and paginated response
        let productsArray = [];
        if (Array.isArray(data)) {
          productsArray = data;
        } else if (data && data.results && Array.isArray(data.results)) {
          productsArray = data.results;
        }

        // Take only first 3 featured products
        setProducts(productsArray.slice(0, 3));
        setError(null);
      } catch (err) {
        console.error("Error fetching featured products:", err);
        setError("Failed to load featured products");
        setProducts([]);
      } finally {
        setLoading(false);
      }
    };

    fetchFeaturedProducts();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3].map((i) => (
            <div
              key={i}
              className="bg-gray-200 animate-pulse aspect-[4/5] rounded-lg"
            ></div>
          ))}
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="text-center py-12">
          <p className="text-red-500">{error}</p>
        </div>
      </div>
    );
  }

  // No products - show message instead of hiding
  if (products.length === 0) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <p className="text-gray-500">
            No featured products available. Please mark some products as
            featured in the admin panel.
          </p>
        </div>
      </div>
    );
  }

  // Display featured products
  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-10">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <a
            key={product.id}
            href={`/products/${product.category_slug || ""}`}
            className="relative group overflow-hidden shadow-lg transform transition duration-300 hover:scale-105"
          >
            {/* Product Image */}
            <div className="w-[85%] mx-auto aspect-[4/5] bg-black">
              {product.thumbnail ? (
                <img
                  src={product.thumbnail}
                  alt={product.name}
                  className="w-full h-full object-cover group-hover:opacity-90 transition duration-300"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-white text-sm">
                  Image Coming Soon
                </div>
              )}
            </div>

            {/* Overlay text */}
            <div className="absolute inset-0 flex flex-col items-center px-4 pt-4">
              <p className="text-xs sm:text-sm font-semibold uppercase text-white bg-[#1228e1] px-2 py-1 mb-2">
                Featured Product
              </p>
              <h3 className="text-lg md:text-xl font-bold text-white drop-shadow-lg">
                {product.name}
              </h3>
              <p className="text-sm text-white drop-shadow-lg mt-2">
                {product.company}
              </p>
            </div>
          </a>
        ))}
      </div>
    </div>
  );
};

export default FeaturedProducts;
</file>

<file path="src/components/common/FlexSlider.jsx">
import { ChevronLeft, ChevronRight } from 'lucide-react';
import React, { useCallback, useEffect, useState } from 'react';

import { getSlides } from '../../api/services';

const FlexSlider = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const [slides, setSlides] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const interval = 8000;

  // Fetch slides from API
  useEffect(() => {
    const fetchSlides = async () => {
      try {
        setLoading(true);
        const data = await getSlides();
        // Handle both paginated (data.results) and non-paginated (data) responses
        const slidesData = Array.isArray(data) ? data : (data.results || []);
        setSlides(slidesData);
        setError(null);
      } catch (err) {
        console.error('Error fetching slides:', err);
        setError('Failed to load slides');
        setSlides([]); // Set empty array on error
      } finally {
        setLoading(false);
      }
    };

    fetchSlides();
  }, []);

  const nextSlide = useCallback(() => {
    if (isAnimating || slides.length === 0) return;
    setIsAnimating(true);
    setCurrentSlide((prev) => (prev + 1) % slides.length);
    setTimeout(() => setIsAnimating(false), 750);
  }, [isAnimating, slides.length]);

  const prevSlide = useCallback(() => {
    if (isAnimating || slides.length === 0) return;
    setIsAnimating(true);
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
    setTimeout(() => setIsAnimating(false), 750);
  }, [isAnimating, slides.length]);

  const goToSlide = (index) => {
    if (isAnimating || index === currentSlide) return;
    setIsAnimating(true);
    setCurrentSlide(index);
    setTimeout(() => setIsAnimating(false), 750);
  };

  // Auto-play
  useEffect(() => {
    if (slides.length === 0) return;
    const autoPlay = setInterval(() => {
      nextSlide();
    }, interval);

    return () => clearInterval(autoPlay);
  }, [nextSlide, slides.length]);

  // Keyboard navigation
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'ArrowRight') nextSlide();
      if (e.key === 'ArrowLeft') prevSlide();
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [nextSlide, prevSlide]);

  // Loading state
  if (loading) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px] bg-gray-200 rounded-lg animate-pulse flex items-center justify-center">
          <p className="text-gray-500">Loading slides...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px] bg-red-50 rounded-lg flex items-center justify-center">
          <p className="text-red-500">{error}</p>
        </div>
      </div>
    );
  }

  // No slides
  if (slides.length === 0) {
    return null;
  }

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 sm:mt-8 lg:mt-10">
      <div className="relative w-full overflow-hidden bg-gray-900 rounded-lg shadow-xl group">
        {/* Slides */}
        <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[450px]">
          {slides.map((slide, index) => (
            <div
              key={slide.id}
              className={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
                index === currentSlide ? 'opacity-100 z-10' : 'opacity-0 z-0'
              }`}
            >
              <img
                src={slide.image}
                alt={slide.title}
                className="w-full h-full object-cover"
              />

              {/* Content */}
              <div className="absolute inset-0 flex items-center justify-center text-center text-white px-4 sm:px-6 lg:px-8">
                <div className="max-w-3xl mx-auto">
                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-200'
                        : 'opacity-0 translate-y-12'
                    }`}
                  >
                    <p className="text-xs sm:text-sm md:text-base lg:text-lg font-semibold uppercase tracking-wider mb-3 md:mb-4 lg:mb-6 text-blue-200">
                      {slide.subtitle}
                    </p>
                  </div>

                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-300'
                        : 'opacity-0 translate-y-12'
                    }`}
                  >
                    <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold uppercase leading-tight mb-4 md:mb-6 lg:mb-8">
                      {slide.title}
                      {slide.title_span && (
                        <span className="block text-white">{slide.title_span}</span>
                      )}
                    </h1>
                  </div>

                  <div
                    className={`transform transition-all duration-700 ${
                      index === currentSlide
                        ? 'opacity-100 translate-y-0 delay-500'
                        : 'opacity-0 translate-y-8'
                    }`}
                  >
                    <a
                      href={slide.link}
                      className="inline-block bg-[#1228e1] text-white hover:bg-white hover:text-[#1228e1] px-6 md:px-8 py-3 md:py-4 font-semibold uppercase tracking-wide transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl rounded-sm"
                    >
                      {slide.button_text}
                    </a>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Navigation Arrows */}
        <div className="absolute inset-y-0 left-0 flex items-center z-30">
          <button
            onClick={prevSlide}
            disabled={isAnimating}
            className="ml-4 w-12 h-12 bg-white bg-opacity-90 hover:bg-opacity-100 border border-gray-200 rounded-full flex items-center justify-center text-gray-800 hover:text-[#1228e1] transition-all duration-300 transform hover:scale-110 shadow-lg hover:shadow-xl opacity-80 hover:opacity-100 disabled:opacity-30 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-6 h-6" />
          </button>
        </div>

        <div className="absolute inset-y-0 right-0 flex items-center z-30">
          <button
            onClick={nextSlide}
            disabled={isAnimating}
            className="mr-4 w-12 h-12 bg-white bg-opacity-90 hover:bg-opacity-100 border border-gray-200 rounded-full flex items-center justify-center text-gray-800 hover:text-[#1228e1] transition-all duration-300 transform hover:scale-110 shadow-lg hover:shadow-xl opacity-80 hover:opacity-100 disabled:opacity-30 disabled:cursor-not-allowed"
          >
            <ChevronRight className="w-6 h-6" />
          </button>
        </div>

        {/* Dots */}
        <div className="absolute bottom-4 md:bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20">
          {slides.map((_, index) => (
            <button
              key={index}
              onClick={() => goToSlide(index)}
              disabled={isAnimating}
              className={`w-3 h-3 md:w-4 md:h-4 rounded-full transition-all duration-500 border-2 ${
                index === currentSlide
                  ? 'bg-[#1228e1] border-[#1228e1] scale-110'
                  : 'bg-white bg-opacity-60 border-white hover:bg-opacity-80'
              } disabled:opacity-50 shadow-sm`}
            />
          ))}
        </div>

        {/* Counter */}
        <div className="absolute top-4 right-4 bg-black bg-opacity-70 text-white px-3 py-1.5 text-sm font-medium shadow-lg rounded-sm">
          {currentSlide + 1} / {slides.length}
        </div>
      </div>
    </div>
  );
};

export default FlexSlider;
</file>

<file path="src/components/common/FloatingActions.jsx">
import React, { useEffect, useState } from "react";

import { ArrowUpCircle } from "lucide-react";
import { FaWhatsapp } from "react-icons/fa";

const FloatingActions = ({ phoneNumber = "254700000000", message = "Hello!" }) => {
  const [showTop, setShowTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const whatsappLink = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;

  return (
    <div className="fixed bottom-6 right-6 z-50 flex flex-col space-y-3 items-end">
      {/* WhatsApp Button */}
      <a
        href={whatsappLink}
        target="_blank"
        rel="noopener noreferrer"
        className="flex items-center border border-gray-300 rounded-full shadow-lg px-3 py-2 text-white bg-[#25D366] hover:bg-[#25D366] hover:text-black transition-colors duration-300"
        title="Chat with us on WhatsApp"
      >
        <FaWhatsapp className="w-6 h-6 mr-2 transition-colors duration-300" />
        <span className="font-semibold text-sm">Chat Us on WhatsApp</span>
      </a>

      {/* Back to Top Button */}
      <div
        className={`transform transition-all duration-500 ${
          showTop ? "opacity-100 translate-y-0" : "opacity-0 translate-y-6 pointer-events-none"
        }`}
      >
        <button
          onClick={scrollToTop}
          className="flex items-center justify-center w-12 h-12 bg-[#1228e1] text-white rounded-full shadow-lg hover:bg-blue-700 transition"
          title="Back to top"
        >
          <ArrowUpCircle className="w-6 h-6" />
        </button>
      </div>
    </div>
  );
};

export default FloatingActions;
</file>

<file path="src/components/common/InfoSection.jsx">
import { Headphones, ShieldCheck, Truck } from "lucide-react";

import React from "react";

const InfoSection = () => {
  const infoItems = [
    {
      id: 1,
      icon: Truck,
      title: "Nationwide Delivery",
      description: "Fast and reliable delivery everywhere.",
    },
    {
      id: 2,
      icon: ShieldCheck,
      title: "Quality Assurance",
      description: "Trusted products with top quality.",
    },
    {
      id: 3,
      icon: Headphones,
      title: "24/7 Support",
      description: "Always available to help you.",
    },
  ];

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-16">
      <div className="grid grid-cols-1 md:grid-cols-3 divide-y md:divide-y-0 md:divide-x divide-gray-300">
        {infoItems.map((item) => (
          <div
            key={item.id}
            className="flex items-center space-x-4 p-6 group"
          >
            <item.icon className="w-10 h-10 text-black transition-colors duration-300 group-hover:text-[#1228e1]" />
            <div className="flex flex-col justify-center">
              <h3 className="text-base md:text-lg font-bold uppercase text-black">
                {item.title}
              </h3>
              <p className="text-gray-600 text-sm mt-1">{item.description}</p>
            </div>
          </div>
        ))}
      </div>
      {/* Horizontal Divider */}
      <div className="border-t border-gray-300 mt-12"></div>
    </div>
  );
};

export default InfoSection;
</file>

<file path="src/components/common/LatestsProducts.jsx">
import React, { useEffect, useState } from "react";
import {
  getBestSellerProducts,
  getFeaturedProducts,
  getLatestProducts,
} from "../../api/services";

import ProductCard from "../common/ProductCard";

const LatestProducts = () => {
  const [activeTab, setActiveTab] = useState("New Arrivals");
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch products based on active tab
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      setError(null);

      try {
        let data = [];
        if (activeTab === "New Arrivals") {
          data = await getLatestProducts();
        } else if (activeTab === "Featured") {
          data = await getFeaturedProducts();
        } else if (activeTab === "Best Sellers") {
          data = await getBestSellerProducts();
        }

        // Handle both array and paginated responses
        const list = Array.isArray(data)
          ? data
          : data?.results && Array.isArray(data.results)
          ? data.results
          : [];

        setProducts(list);
      } catch (err) {
        console.error("Error loading products:", err);
        setError("Failed to load products. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [activeTab]);

  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-12">
      {/* Heading */}
      <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-6 text-center">
        Latest Products
      </h2>

      {/* Tabs */}
      <div className="flex justify-center space-x-6 mb-8">
        {["New Arrivals", "Featured", "Best Sellers"].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 font-medium transition ${
              activeTab === tab
                ? "text-[#1228e1] border-b-2 border-[#1228e1]"
                : "text-gray-600 hover:text-[#1228e1]"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>

      {/* Loading State */}
      {loading && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          {[1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className="bg-gray-200 animate-pulse aspect-[4/5] rounded-lg"
            ></div>
          ))}
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="text-center text-red-500 py-8">{error}</div>
      )}

      {/* No Products */}
      {!loading && !error && products.length === 0 && (
        <div className="text-center text-gray-500 py-8">
          No products found for this category.
        </div>
      )}

      {/* Product Grid */}
      {!loading && !error && products.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          {products.map((product) => (
            <ProductCard
              key={product.id}
              image={product.thumbnail || "https://via.placeholder.com/300x400"}
              company={product.company}
              name={product.name}
              price={product.price}
            />
          ))}
        </div>
      )}

      {/* All Products Button */}
      <div className="text-center">
        <a
          href="/products"
          className="inline-block bg-[#1228e1] text-white px-6 py-3 font-semibold uppercase tracking-wide hover:bg-white hover:text-[#1228e1] border border-[#1228e1] transition"
        >
          All Products
        </a>
      </div>
    </div>
  );
};

export default LatestProducts;
</file>

<file path="src/components/common/ProductCard.jsx">
import { Expand, Heart, ShoppingCart } from "lucide-react";
import React, { useState } from "react";

import ProductModal from "./ProductModal";

const ProductCard = ({ id, company, name, price, thumbnail, image }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Use thumbnail or image prop, with fallback
  const displayImage = thumbnail || image || "https://via.placeholder.com/400x300";
  const displayName = name || "Unnamed Product";
  const displayCompany = company || "Unknown Brand";
  const displayPrice = price || "N/A";

  // Product object for modal
  const product = {
    id: id,
    name: displayName,
    company: displayCompany,
    price: displayPrice,
    thumbnail: displayImage,
    brand: displayCompany,
    condition: "New",
    images: [displayImage], // Modal expects array of images
  };

  return (
    <>
      <div className="relative group bg-white shadow hover:shadow-lg transition duration-300 p-3">
        {/* Product Image */}
        <div className="relative w-full aspect-[4/5]  overflow-hidden">
          <img
            src={displayImage}
            alt={displayName}
            className="w-full h-full object-cover group-hover:opacity-90 transition duration-300"
            onError={(e) => {
              e.target.src = "https://via.placeholder.com/400x300?text=No+Image";
            }}
          />

          {/* Hover Icons */}
          <div className="absolute inset-0 flex items-center justify-center bg-opacity-40 opacity-0 group-hover:opacity-100 transition duration-300 space-x-3">
            <button className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition">
              <Heart className="w-5 h-5" />
            </button>
            <button className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition">
              <ShoppingCart className="w-5 h-5" />
            </button>
            <button
              onClick={() => setIsModalOpen(true)}
              className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition"
            >
              <Expand className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Product Info */}
        <div className="mt-3 text-center">
          <p className="text-sm text-gray-500">{displayCompany}</p>
          <h3 className="text-base font-semibold text-gray-900">
            {displayName}
          </h3>
          <p className="text-[#1228e1] font-bold">
            {displayPrice !== "N/A" ? `Ksh. ${displayPrice}` : "Price not set"}
          </p>
        </div>
      </div>

      {/* Modal */}
      <ProductModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        product={product}
      />
    </>
  );
};

export default ProductCard;
</file>

<file path="src/components/common/ProductModal.jsx">
import React, { useEffect, useState } from "react";

import ReactDOM from "react-dom";
import { X } from "lucide-react";

const ProductModal = ({ isOpen, onClose, product }) => {
  const [showModal, setShowModal] = useState(false);

  // Animate open/close
  useEffect(() => {
    if (isOpen) {
      setShowModal(true);
    } else {
      const timer = setTimeout(() => setShowModal(false), 200); // match transition duration
      return () => clearTimeout(timer);
    }
  }, [isOpen]);

  // Close on ESC
  useEffect(() => {
    const handleEsc = (e) => e.key === "Escape" && onClose();
    document.addEventListener("keydown", handleEsc);
    return () => document.removeEventListener("keydown", handleEsc);
  }, [onClose]);

  if (!showModal) return null;

  const discounted =
    product?.discountedPrice && product?.discountedPrice < product?.price;

  return ReactDOM.createPortal(
    <div
      className={`fixed inset-0 z-50 flex items-center justify-center bg-black/50 
        transition-opacity duration-200 ${
          isOpen ? "opacity-100" : "opacity-0"
        }`}
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div
        className={`relative bg-white w-[95%] max-w-4xl rounded-2xl shadow-lg overflow-hidden 
          flex flex-col md:flex-row transform transition-transform duration-200 ${
            isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"
          }`}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Left: Images */}
        <div className="md:w-1/2 p-4 flex flex-col items-center">
          <img
            src={product.thumbnail}
            alt={product.name}
            className="w-full max-h-[300px] object-cover rounded-lg"
          />
          <div className="flex space-x-2 mt-3">
            {product.images?.map((img, idx) => (
              <img
                key={idx}
                src={img}
                alt={`Thumbnail ${idx}`}
                className="w-16 h-16 object-cover rounded-md border cursor-pointer hover:border-[#1228e1]"
              />
            ))}
          </div>
        </div>

        {/* Right: Details */}
        <div className="md:w-1/2 p-6 flex flex-col">
          {/* Close button */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 bg-gray-100 rounded-full hover:bg-gray-200"
            aria-label="Close"
          >
            <X className="w-5 h-5" />
          </button>

          <h2 className="text-xl font-bold text-gray-900">{product.name}</h2>
          <p className="text-sm text-gray-500 mt-1">Brand: {product.brand}</p>
          <p className="text-sm text-gray-500">Condition: {product.condition}</p>

          {/* Price */}
          <div className="mt-3">
            {discounted ? (
              <div>
                <span className="text-2xl font-bold text-[#1228e1] mr-2">
                  Ksh {product.discountedPrice}
                </span>
                <span className="line-through text-gray-500">
                  Ksh {product.price}
                </span>
                <span className="ml-2 text-green-600 font-medium">10% OFF</span>
              </div>
            ) : (
              <span className="text-2xl font-bold text-[#1228e1]">
                Ksh {product.price}
              </span>
            )}
          </div>

          {/* Cart Summary */}
          <div className="mt-6 border-t pt-4">
            <div className="flex justify-between text-sm text-gray-600">
              <span>Items in Cart</span>
              <span>1</span>
            </div>
            <div className="flex justify-between text-sm text-gray-900 font-semibold mt-1">
              <span>Subtotal</span>
              <span>
                Ksh {discounted ? product.discountedPrice : product.price}
              </span>
            </div>
          </div>

          {/* Actions */}
          <div className="mt-6 flex space-x-3">
            <button
              onClick={onClose}
              className="w-1/2 py-2 rounded-lg border border-gray-300 hover:bg-gray-100"
            >
              Continue Shopping
            </button>
            <button className="w-1/2 py-2 rounded-lg bg-[#1228e1] text-white font-semibold hover:bg-[#0f20b3]">
              Proceed to Checkout
            </button>
          </div>

          {/* Extra Links */}
          <div className="mt-4 text-sm">
            <button className="text-[#1228e1] hover:underline">
              Add to Wishlist
            </button>
          </div>

          {/* Trust Indicators */}
          <div className="mt-6 flex space-x-3 items-center text-xs text-gray-500">
            <span className="px-2 py-1 border rounded">🔒 Secure Checkout</span>
            <span className="px-2 py-1 border rounded">✔ Buyer Protection</span>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default ProductModal;
</file>

<file path="src/components/common/ProductsGrid.jsx">
import React, { useState } from "react";

import ProductCard from "./ProductCard";

const ProductsGrid = ({ products,selectedCategory }) => {
  const productsPerPage = 16; // 4x4 grid
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(products.length / productsPerPage);

  const startIndex = (currentPage - 1) * productsPerPage;
  const currentProducts = products.slice(
    startIndex,
    startIndex + productsPerPage
  );

  return (
    <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-6">
  <h2 className="text-2xl font-bold text-gray-900 relative inline-block">
    {selectedCategory === "all"
      ? "All Products"
      : selectedCategory
          .replace(/-/g, " ")
          .replace(/\b\w/g, (c) => c.toUpperCase())}
    <span className="block w-16 h-1 bg-[#1228e1] mt-2 rounded"></span>
  </h2>
</div>
      {/* Products Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
        {currentProducts.map((product) => (
          <ProductCard key={product.id} {...product} />
        ))}
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="mt-6 flex justify-center space-x-2">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button
              key={page}
              onClick={() => setCurrentPage(page)}
              className={`px-3 py-1 border ${
                page === currentPage
                  ? "bg-[#1228e1] text-white border-[#1228e1]"
                  : "bg-white text-gray-700 border-gray-300 hover:bg-gray-100"
              } rounded transition`}
            >
              {page}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ProductsGrid;
</file>

<file path="src/components/common/ProductsHero.jsx">
import { Link } from "react-router-dom";
import React from "react";

const ProductsHero = ({ selectedSubcategory }) => {
  // Format subcategory for display
  const displayCategory = selectedSubcategory
    ? selectedSubcategory.replace(/-/g, " ")
    : null;

  return (
    <div
      className="w-full h-[25vh] relative flex items-center justify-center bg-black bg-opacity-10"
      style={{
        backgroundImage:
          "url('https://images.unsplash.com/photo-1584622781564-1d987709cea4?w=1600&h=400&fit=crop')",
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="absolute inset-0 bg-black bg-opacity-30"></div>

      <div className="relative text-center text-white">
        <h1 className="text-2xl md:text-3xl font-bold flex items-center justify-center gap-2">
          <Link
            to="/products"
            className="hover:text-[#1228e1] transition-colors duration-200"
          >
            Home
          </Link>
          {displayCategory && (
            <>
              <span className="mx-2">|</span>
              <span className="capitalize">{displayCategory}</span>
            </>
          )}
        </h1>
      </div>
    </div>
  );
};

export default ProductsHero;
</file>

<file path="src/components/common/SubcategoriesSection.jsx">
import React from "react";

const SubcategoriesSection = ({ subcategories, onSelect }) => {
  return (
    <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
      {/* Section Title */}
      <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-6 relative inline-block">
        Subcategories
        <span className="block w-16 h-1 bg-blue-600 mt-1 rounded"></span>
      </h2>

      {/* Subcategory Cards */}
      <div
        className="grid gap-6 sm:gap-8"
        style={{
          gridTemplateColumns: `repeat(auto-fill, minmax(150px, 1fr))`,
        }}
      >
        {subcategories.map((subcat) => (
          <div
            key={subcat.id}
            className="group relative bg-white rounded-2xl shadow-sm hover:shadow-2xl overflow-hidden transform hover:-translate-y-2 transition-all duration-500 cursor-pointer"
            onClick={() => onSelect(subcat.slug)}
          >
            {/* Category Image */}
            <div className="h-40 w-full bg-gray-200 relative overflow-hidden">
              {subcat.image ? (
                <img
                  src={subcat.image}
                  alt={subcat.name}
                  className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                />
              ) : (
                <span className="absolute inset-0 flex items-center justify-center text-gray-600 font-semibold text-sm">
                  No Image
                </span>
              )}

              {/* Overlay effect */}
              <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            </div>

            {/* Category Name */}
            <div className="h-16 flex items-center justify-center bg-white text-center px-2">
              <span className="font-semibold text-gray-800 text-sm sm:text-base group-hover:text-blue-600 transition-colors duration-500">
                {subcat.name}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SubcategoriesSection;
</file>

<file path="src/components/common/ThreeColumnSection.jsx">
import React from "react";

const ThreeColumnSection = () => {
  return (
    <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-16">
      {/* Grid: 12 columns */}
      <div className="grid grid-cols-1 md:grid-cols-12 gap-6 items-start">
        
        {/* Images section (≈62%) */}
        <div className="md:col-span-7 grid grid-cols-2 gap-6">
          {/* Image 1 */}
          <div className="w-full aspect-[3/4] bg-black"></div>

          {/* Image 2 shifted lower */}
          <div className="w-full aspect-[3/4] bg-black relative top-12"></div>
        </div>

        {/* Text Block aligned with Image 2 (≈38%) */}
        <div className="md:col-span-5 flex flex-col justify-center space-y-4 px-4 relative top-28">
          {/* Subheading */}
          <p className="text-sm font-semibold text-[#1228e1] uppercase tracking-wide">
            Premium Quality
          </p>

          {/* Main Heading */}
          <h2 className="text-2xl md:text-3xl font-bold uppercase text-gray-900">
            Modern Bathroom Solutions
          </h2>

          {/* Description */}
          <p className="text-gray-600 text-sm md:text-base">
            Discover stylish and durable bathroom fittings designed to bring
            elegance and functionality to your home.
          </p>

          {/* Button */}
          <a
            href="/products"
            className="inline-flex items-center justify-center bg-[#1228e1] text-white px-4 py-2 text-sm font-semibold uppercase tracking-wide hover:bg-blue-900 transition"
          >
            Explore Now
          </a>
        </div>
      </div>
    </div>
  );
};

export default ThreeColumnSection;
</file>

<file path="src/components/navigation/Footer.jsx">
import { FaFacebook, FaInstagram, FaTiktok, FaWhatsapp } from "react-icons/fa";
import { Mail, MapPin, Phone } from "lucide-react";
import React, { useEffect, useState } from "react";
import { getCategories, getCompanyInfo } from "../../api/services";

const Footer = () => {
  const [companyInfo, setCompanyInfo] = useState(null);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch company info
        const info = await getCompanyInfo();
        setCompanyInfo(info);

        // Fetch categories
        const cats = await getCategories();
        setCategories(Array.isArray(cats) ? cats : cats.results || []);
      } catch (err) {
        console.error("Error fetching footer data:", err);
      }
    };

    fetchData();
  }, []);

  return (
    <footer className="bg-white text-gray-800 pt-10 pb-6 border-t border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Product Categories */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Product Categories</h3>
          {categories.length > 0 ? (
            <ul className="space-y-2">
              {categories.slice(0, 10).map((category) => (
                <li key={category.id}>
                  <a
                    href={`/products/${category.slug}`}
                    className="hover:text-[#1228e1] transition-colors"
                  >
                    {category.name}
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            <div className="space-y-2 text-gray-400">
              <p>Loading categories...</p>
            </div>
          )}
        </div>

        {/* Contact Us */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Contact Us</h3>
          {companyInfo ? (
            <ul className="space-y-3">
              <li className="flex items-start space-x-2">
                <MapPin className="w-5 h-5 text-gray-600 flex-shrink-0 mt-0.5" />
                <span>{companyInfo.address}</span>
              </li>
              <li className="flex items-center space-x-2">
                <Mail className="w-5 h-5 text-gray-600" />
                <a
                  href={`mailto:${companyInfo.email}`}
                  className="hover:text-[#1228e1] transition-colors"
                >
                  {companyInfo.email}
                </a>
              </li>
              <li className="flex items-center space-x-2">
                <Phone className="w-5 h-5 text-gray-600" />
                <a
                  href={`tel:${companyInfo.phone}`}
                  className="hover:text-[#1228e1] transition-colors"
                >
                  {companyInfo.phone}
                </a>
              </li>
            </ul>
          ) : (
            <div className="space-y-3 text-gray-400">
              <p>Loading contact info...</p>
            </div>
          )}
        </div>

        {/* My Account */}
        <div>
          <h3 className="text-lg font-bold mb-4 uppercase">Quick Links</h3>
          <ul className="space-y-2">
            <li>
              <a href="/" className="hover:text-[#1228e1] transition-colors">
                Home
              </a>
            </li>
            <li>
              <a href="/products" className="hover:text-[#1228e1] transition-colors">
                All Products
              </a>
            </li>
            <li>
              <a href="/contact" className="hover:text-[#1228e1] transition-colors">
                Contact Us
              </a>
            </li>
          </ul>
        </div>
      </div>

      {/* Social Media Icons */}
      {companyInfo && (
        <div className="mt-10 flex justify-center space-x-6">
          {companyInfo.instagram_url && (
            <a
              href={companyInfo.instagram_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="Instagram"
            >
              <FaInstagram className="w-6 h-6" />
            </a>
          )}
          {companyInfo.tiktok_url && (
            <a
              href={companyInfo.tiktok_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="TikTok"
            >
              <FaTiktok className="w-6 h-6" />
            </a>
          )}
          {companyInfo.whatsapp_number && (
            <a
              href={`https://wa.me/${companyInfo.whatsapp_number}`}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="WhatsApp"
            >
              <FaWhatsapp className="w-6 h-6" />
            </a>
          )}
          {companyInfo.facebook_url && (
            <a
              href={companyInfo.facebook_url}
              target="_blank"
              rel="noreferrer"
              className="text-gray-500 hover:text-[#1228e1] transition"
              title="Facebook"
            >
              <FaFacebook className="w-6 h-6" />
            </a>
          )}
        </div>
      )}

      {/* Footer Bottom */}
      <div className="mt-6 border-t border-gray-200 pt-4 text-center text-sm text-gray-500">
        © {new Date().getFullYear()} Hardware Store. All rights reserved.
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/components/navigation/Navbar.jsx">
import { ChevronDown, Heart, Search, ShoppingCart, User } from "lucide-react";

import { Link } from "react-router-dom";
import Logo from "../../assets/Logo.png";
import React from "react";

const Navbar = () => {
  // Example counts (can be hooked to state later)
  const favCount = 0;
  const cartCount = 0;

  return (
    <nav className="w-full bg-white shadow-md px-6 py-4 flex items-center justify-between relative">
      {/* Logo */}
      <div className="flex items-center space-x-2">
        <Link to="/">
          <img src={Logo} alt="Logo" className="h-12 w-auto" />
        </Link>
      </div>

      {/* Links */}
      <ul className="flex space-x-8 font-medium text-black relative">
        <li>
          <Link
            to="/"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Home
          </Link>
        </li>

        {/* Products with Dropdown */}
        {/* Products with Dropdown */}
<li className="relative group cursor-pointer">
  <div className="flex items-center space-x-1 hover:text-[#1228e1] transition-colors duration-200">
    <Link to="/products">Products</Link>
    <ChevronDown size={16} />
  </div>

  {/* Dropdown Menu */}
  <ul className="absolute left-0 top-full mt-2 w-56 bg-white border border-gray-200 shadow-lg rounded-md opacity-0 group-hover:opacity-100 invisible group-hover:visible transition-all duration-200 z-50">
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/plumbing-piping">Plumbing & Piping</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/electrical">Electrical</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/carpentry">Carpentry</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/steel">Steel</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/glues">Glues</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/paints">Paints</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/gas">Gas</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/curtains">Curtains</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/cement">Cement</Link>
    </li>
    <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
      <Link to="/products/home-equipment">Home Equipment</Link>
    </li>
  </ul>
</li>


        <li>
          <Link
            to="/posts"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Posts
          </Link>
        </li>
        <li>
          <Link
            to="/contact"
            className="hover:text-[#1228e1] cursor-pointer transition-colors duration-200"
          >
            Contact Us
          </Link>
        </li>
      </ul>

      {/* Icons */}
      <div className="flex space-x-6 text-black relative">
        <Search className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
        <User className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />

        {/* Favorites with badge */}
        <div className="relative">
          <Heart className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
          <span className="absolute -top-2 -right-2 bg-[#1228e1] text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full">
            {favCount}
          </span>
        </div>

        {/* Cart with badge */}
        <div className="relative">
          <ShoppingCart className="w-5 h-5 cursor-pointer hover:text-[#1228e1] transition-colors duration-200" />
          <span className="absolute -top-2 -right-2 bg-[#1228e1] text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full">
            {cartCount}
          </span>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
</file>

<file path="src/components/navigation/Topbar.jsx">
import React, { useEffect, useState } from "react";

import { getCompanyInfo } from "../../api/services";

const TopBar = () => {
  const [companyInfo, setCompanyInfo] = useState(null);

  useEffect(() => {
    const fetchCompanyInfo = async () => {
      try {
        const data = await getCompanyInfo();
        setCompanyInfo(data);
      } catch (err) {
        console.error("Error fetching company info:", err);
      }
    };

    fetchCompanyInfo();
  }, []);

  return (
    <div className="w-full bg-[#1228e1] text-white text-sm px-6 py-2 flex items-center justify-between">
      {/* Left message */}
      <p>We do delivery across the country</p>

      {/* Contact info */}
      <div className="flex space-x-6">
        {companyInfo ? (
          <>
            <a 
              href={`mailto:${companyInfo.email}`} 
              className="hover:underline"
            >
              {companyInfo.email}
            </a>
            <a 
              href={`tel:${companyInfo.phone}`} 
              className="hover:underline"
            >
              {companyInfo.phone}
            </a>
          </>
        ) : (
          <span className="text-white/80">Loading...</span>
        )}
      </div>
    </div>
  );
};

export default TopBar;
</file>

<file path="src/pages/Home.jsx">
import CompanyLogos from "../components/common/CompanyLogos";
import FeaturedProducts from "../components/common/FeaturedProducts";
import FlexSlider from "../components/common/FlexSlider";
import FloatingActions from "../components/common/FloatingActions";
import Footer from "../components/navigation/Footer";
import InfoSection from "../components/common/InfoSection";
import LatestProducts from "../components/common/LatestsProducts";
import Navbar from "../components/navigation/Navbar";
// src/pages/Home.jsx
import React from "react";
import ThreeColumnSection from "../components/common/ThreeColumnSection";
import TopBar from "../components/navigation/Topbar";

const Home = () => {
  return (
    <div>
      <TopBar />
      <Navbar />
      <FlexSlider />
      <FloatingActions />
      <FeaturedProducts />
      <LatestProducts />
      <InfoSection />
      <ThreeColumnSection />
      <CompanyLogos />
      <Footer />
    </div>
  );
};

export default Home;
</file>

<file path="src/pages/Products.jsx">
import React, { useEffect, useState } from "react";
import { getAllProducts, getCategories, getProductsByCategory } from "../api/services";
import { useNavigate, useParams } from "react-router-dom";

import FloatingActions from "../components/common/FloatingActions";
import Footer from "../components/navigation/Footer";
import Navbar from "../components/navigation/Navbar";
import ProductsGrid from "../components/common/ProductsGrid";
import ProductsHero from "../components/common/ProductsHero";
import SubcategoriesSection from "../components/common/SubcategoriesSection";
import TopBar from "../components/navigation/Topbar";

const Products = () => {
  const { subcategory } = useParams();
  const navigate = useNavigate();

  const [selectedSubcategory, setSelectedSubcategory] = useState(subcategory || null);
  const [subcategories, setSubcategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [productsLoading, setProductsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch categories on mount
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const data = await getCategories();
        // Handle both array and paginated response
        const categoriesArray = Array.isArray(data) 
          ? data 
          : (data.results && Array.isArray(data.results)) 
          ? data.results 
          : [];
        setSubcategories(categoriesArray);
      } catch (err) {
        console.error('Error fetching categories:', err);
        setError('Failed to load categories');
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  // Fetch products when subcategory changes
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setProductsLoading(true);
        setSelectedSubcategory(subcategory || null);

        let data;
        if (subcategory) {
          data = await getProductsByCategory(subcategory);
        } else {
          data = await getAllProducts();
        }

        // Handle both array and paginated response
        const productsArray = Array.isArray(data)
          ? data
          : (data.results && Array.isArray(data.results))
          ? data.results
          : [];

        setProducts(productsArray);
      } catch (err) {
        console.error('Error fetching products:', err);
        setError('Failed to load products');
      } finally {
        setProductsLoading(false);
      }
    };

    fetchProducts();
  }, [subcategory]);

  // Handle subcategory selection
  const handleSelectSubcategory = (slug) => {
    navigate(`/products/${slug}`);
  };

  return (
    <div>
      <TopBar />
      <Navbar />
      <ProductsHero selectedSubcategory={selectedSubcategory} />
      
      {/* Loading State for Categories */}
      {loading ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
          <div className="h-32 bg-gray-200 animate-pulse rounded"></div>
        </div>
      ) : error ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8 text-center py-12">
          <p className="text-red-500">{error}</p>
        </div>
      ) : subcategories.length === 0 ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8 text-center py-12">
          <p className="text-gray-500">No categories available</p>
        </div>
      ) : (
        <SubcategoriesSection
          subcategories={subcategories}
          onSelect={handleSelectSubcategory}
        />
      )}

      {/* Products Grid with Loading/Error States */}
      {productsLoading ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
            {[...Array(8)].map((_, i) => (
              <div key={i} className="bg-gray-200 animate-pulse h-64 rounded"></div>
            ))}
          </div>
        </div>
      ) : (
        <ProductsGrid 
          products={products} 
          selectedCategory={subcategory || "all"} 
        />
      )}

      <Footer />
      <FloatingActions />
    </div>
  );
};

export default Products;
</file>

<file path="src/App.css">
@import "tailwindcss";
</file>

<file path="src/App.jsx">
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";

import Home from "./pages/Home";
import Products from "./pages/Products";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products/:subcategory?" element={<Products />} />
      </Routes>
    </Router>
  );
};

export default App;
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- <link rel="icon" type="image/svg+xml" href="/vite.svg" /> -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Joel's Store</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "h-store",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.12",
    "axios": "^1.12.2",
    "framer-motion": "^12.23.12",
    "lucide-react": "^0.543.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.8.2",
    "tailwindcss": "^4.1.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.1.2"
  }
}
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss(), ], 
})
</file>

</files>
</file>

<file path="h-store/src/pages/Products.jsx">
import React, { useEffect, useState } from "react";
import { getAllProducts, getCategories, getProductsByCategory } from "../api/services";
import { useNavigate, useParams } from "react-router-dom";

import FloatingActions from "../components/common/FloatingActions";
import Footer from "../components/navigation/Footer";
import Navbar from "../components/navigation/Navbar";
import ProductsGrid from "../components/common/ProductsGrid";
import ProductsHero from "../components/common/ProductsHero";
import SubcategoriesSection from "../components/common/SubcategoriesSection";
import TopBar from "../components/navigation/Topbar";

const Products = () => {
  const { subcategory } = useParams();
  const navigate = useNavigate();

  const [selectedSubcategory, setSelectedSubcategory] = useState(subcategory || null);
  const [subcategories, setSubcategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [productsLoading, setProductsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch categories on mount
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const data = await getCategories();
        // Handle both array and paginated response
        const categoriesArray = Array.isArray(data) 
          ? data 
          : (data.results && Array.isArray(data.results)) 
          ? data.results 
          : [];
        setSubcategories(categoriesArray);
      } catch (err) {
        console.error('Error fetching categories:', err);
        setError('Failed to load categories');
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  // Fetch products when subcategory changes
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setProductsLoading(true);
        setSelectedSubcategory(subcategory || null);

        let data;
        if (subcategory) {
          data = await getProductsByCategory(subcategory);
        } else {
          data = await getAllProducts();
        }

        // Handle both array and paginated response
        const productsArray = Array.isArray(data)
          ? data
          : (data.results && Array.isArray(data.results))
          ? data.results
          : [];

        setProducts(productsArray);
      } catch (err) {
        console.error('Error fetching products:', err);
        setError('Failed to load products');
      } finally {
        setProductsLoading(false);
      }
    };

    fetchProducts();
  }, [subcategory]);

  // Handle subcategory selection
  const handleSelectSubcategory = (slug) => {
    navigate(`/products/${slug}`);
  };

  return (
    <div>
      <TopBar />
      <Navbar />
      <ProductsHero selectedSubcategory={selectedSubcategory} />
      
      {/* Loading State for Categories */}
      {loading ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
          <div className="h-32 bg-gray-200 animate-pulse rounded"></div>
        </div>
      ) : error ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8 text-center py-12">
          <p className="text-red-500">{error}</p>
        </div>
      ) : subcategories.length === 0 ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8 text-center py-12">
          <p className="text-gray-500">No categories available</p>
        </div>
      ) : (
        <SubcategoriesSection
          subcategories={subcategories}
          onSelect={handleSelectSubcategory}
        />
      )}

      {/* Products Grid with Loading/Error States */}
      {productsLoading ? (
        <div className="w-full my-6 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
            {[...Array(8)].map((_, i) => (
              <div key={i} className="bg-gray-200 animate-pulse h-64 rounded"></div>
            ))}
          </div>
        </div>
      ) : (
        <ProductsGrid 
          products={products} 
          selectedCategory={subcategory || "all"} 
        />
      )}

      <Footer />
      <FloatingActions />
    </div>
  );
};

export default Products;
</file>

<file path="h-store/package.json">
{
  "name": "h-store",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.12",
    "axios": "^1.12.2",
    "framer-motion": "^12.23.12",
    "lucide-react": "^0.543.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.8.2",
    "tailwindcss": "^4.1.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.1.2"
  }
}
</file>

<file path="h-store/src/components/common/ProductCard.jsx">
import { Expand, Heart, ShoppingCart } from "lucide-react";
import React, { useState } from "react";

import ProductModal from "./ProductModal";

const ProductCard = ({ id, company, name, price, thumbnail, image, image_1, image_2, category_name, description }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Use thumbnail or image prop, with fallback
  const displayImage = thumbnail || image || "https://via.placeholder.com/400x300";
  const displayName = name || "Unnamed Product";
  const displayCompany = company || "Unknown Brand";
  const displayPrice = price || "N/A";

  // Build images array for gallery (filter out null/undefined values)
  const imageGallery = [thumbnail, image_1, image_2].filter(Boolean);

  // Product object for modal
  const product = {
    id: id,
    name: displayName,
    company: displayCompany,
    price: displayPrice,
    thumbnail: displayImage,
    image_1: image_1,
    image_2: image_2,
    images: imageGallery.length > 0 ? imageGallery : [displayImage], // All available images
    brand: displayCompany,
    condition: "New",
    category_name: category_name,
    description: description,
  };

  return (
    <>
      <div className="relative group bg-white shadow hover:shadow-lg transition duration-300 p-3">
        {/* Product Image */}
        <div className="relative w-full aspect-[4/5] bg-black overflow-hidden">
          <img
            src={displayImage}
            alt={displayName}
            className="w-full h-full object-cover group-hover:opacity-90 transition duration-300"
            onError={(e) => {
              e.target.src = "https://via.placeholder.com/400x300?text=No+Image";
            }}
          />

          {/* Hover Icons */}
          <div className="absolute inset-0 flex items-center justify-center bg-opacity-40 opacity-0 group-hover:opacity-100 transition duration-300 space-x-3">
            <button className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition">
              <Heart className="w-5 h-5" />
            </button>
            <button className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition">
              <ShoppingCart className="w-5 h-5" />
            </button>
            <button
              onClick={() => setIsModalOpen(true)}
              className="bg-white p-2 rounded-full shadow hover:bg-[#1228e1] hover:text-white transition"
            >
              <Expand className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Product Info */}
        <div className="mt-3 text-center">
          <p className="text-sm text-gray-500">{displayCompany}</p>
          <h3 className="text-base font-semibold text-gray-900">
            {displayName}
          </h3>
          <p className="text-[#1228e1] font-bold">
            {displayPrice !== "N/A" ? `Ksh. ${displayPrice}` : "Price not set"}
          </p>
        </div>
      </div>

      {/* Modal */}
      <ProductModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        product={product}
      />
    </>
  );
};

export default ProductCard;
</file>

</files>
